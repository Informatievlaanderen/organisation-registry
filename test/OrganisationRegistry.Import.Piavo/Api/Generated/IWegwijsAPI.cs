// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OrganisationRegistry.Import.Piavo;

using Models;

/// <summary>
/// OrganisationRegistry API - Digitaal Vlaanderen
/// </summary>
public partial interface IOrganisationRegistryAPI : System.IDisposable
{
    /// <summary>
    /// The base URI of the service.
    /// </summary>
    System.Uri BaseUri { get; set; }

    /// <summary>
    /// Gets or sets json serialization settings.
    /// </summary>
    Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

    /// <summary>
    /// Gets or sets json deserialization settings.
    /// </summary>
    Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }


    /// <summary>
    /// Get a list of available bodies.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<BodyListQueryResult>>> BodiesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Register a body.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesPostWithHttpMessagesAsync(RegisterBodyRequest message = default(RegisterBodyRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a body.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available contacts for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> BodiesByBodyIdContactsGetWithHttpMessagesAsync(System.Guid bodyId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a contact for an organisation.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdContactsPostWithHttpMessagesAsync(System.Guid bodyId, AddBodyContactRequest message = default(AddBodyContactRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a contact for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdContactsByIdGetWithHttpMessagesAsync(System.Guid bodyId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a contact for an organisation.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdContactsByIdPutWithHttpMessagesAsync(System.Guid bodyId, string id, UpdateBodyContactRequest message = default(UpdateBodyContactRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available formal frameworks for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> BodiesByBodyIdFormalframeworksGetWithHttpMessagesAsync(System.Guid bodyId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a formal framework for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdFormalframeworksPostWithHttpMessagesAsync(System.Guid bodyId, AddBodyFormalFrameworkRequest message = default(AddBodyFormalFrameworkRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a formal framework for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdFormalframeworksByIdGetWithHttpMessagesAsync(System.Guid bodyId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a formal framework for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdFormalframeworksByIdPutWithHttpMessagesAsync(System.Guid bodyId, string id, UpdateBodyFormalFrameworkRequest message = default(UpdateBodyFormalFrameworkRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a body's information.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByIdInfoGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a body's info.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByIdInfoPutWithHttpMessagesAsync(System.Guid id, UpdateBodyInfoRequest message = default(UpdateBodyInfoRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available lifecycle phases for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> BodiesByBodyIdLifecyclephasesGetWithHttpMessagesAsync(System.Guid bodyId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a lifecycle phase for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdLifecyclephasesPostWithHttpMessagesAsync(System.Guid bodyId, AddBodyLifecyclePhaseRequest message = default(AddBodyLifecyclePhaseRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a lifecycle phase for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdLifecyclephasesByIdGetWithHttpMessagesAsync(System.Guid bodyId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a lifecycle phase for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdLifecyclephasesByIdPutWithHttpMessagesAsync(System.Guid bodyId, string id, UpdateBodyLifecyclePhaseRequest message = default(UpdateBodyLifecyclePhaseRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available mandates for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> BodiesByBodyIdMandatesGetWithHttpMessagesAsync(System.Guid bodyId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a mandate for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdMandatesPostWithHttpMessagesAsync(System.Guid bodyId, AddBodyMandateRequest message = default(AddBodyMandateRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a mandate for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdMandatesByIdGetWithHttpMessagesAsync(System.Guid bodyId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a mandate for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdMandatesByIdPutWithHttpMessagesAsync(System.Guid bodyId, string id, UpdateBodyMandateRequest message = default(UpdateBodyMandateRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available organisations for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> BodiesByBodyIdOrganisationsGetWithHttpMessagesAsync(System.Guid bodyId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Link an organisation to a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdOrganisationsPostWithHttpMessagesAsync(System.Guid bodyId, AddBodyOrganisationRequest message = default(AddBodyOrganisationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get an organisation for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdOrganisationsByIdGetWithHttpMessagesAsync(System.Guid bodyId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update an organisation for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdOrganisationsByIdPutWithHttpMessagesAsync(System.Guid bodyId, string id, UpdateBodyOrganisationRequest message = default(UpdateBodyOrganisationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get gender ratio for a body (grouped by body and bodyseat)
    /// </summary>
    /// <param name='bodyId'>
    /// A body GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsBodyparticipationByBodyIdGetWithHttpMessagesAsync(System.Guid bodyId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get gender ratio totals for a body (grouped by body)
    /// </summary>
    /// <param name='bodyId'>
    /// A body GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsBodyparticipationByBodyIdTotalsGetWithHttpMessagesAsync(System.Guid bodyId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available seats for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> BodiesByBodyIdSeatsGetWithHttpMessagesAsync(System.Guid bodyId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a seat for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdSeatsPostWithHttpMessagesAsync(System.Guid bodyId, AddBodySeatRequest message = default(AddBodySeatRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a seat for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdSeatsByIdGetWithHttpMessagesAsync(System.Guid bodyId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a seat for a body.
    /// </summary>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByBodyIdSeatsByIdPutWithHttpMessagesAsync(System.Guid bodyId, string id, UpdateBodySeatRequest message = default(UpdateBodySeatRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a body's validity.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByIdValidityGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a body's validity.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BodiesByIdValidityPutWithHttpMessagesAsync(System.Guid id, UpdateBodyValidityRequest message = default(UpdateBodyValidityRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available buildings.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> BuildingsGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a building.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BuildingsPostWithHttpMessagesAsync(CreateBuildingRequest message = default(CreateBuildingRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a building.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BuildingsByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a building.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> BuildingsByIdPutWithHttpMessagesAsync(System.Guid id, UpdateBuildingRequest message = default(UpdateBuildingRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all organisations for a formal framework.
    /// </summary>
    /// <param name='id'>
    /// A formal framework GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsBuildingorganisationsByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available capacities.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> CapacitiesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a capacity.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> CapacitiesPostWithHttpMessagesAsync(CreateCapacityRequest message = default(CreateCapacityRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a capacity.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> CapacitiesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a capacity.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> CapacitiesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateCapacityRequest message = default(UpdateCapacityRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all persons for a capacity.
    /// </summary>
    /// <param name='id'>
    /// A capacity GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsCapacitypersonsByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available configuration values.
    /// </summary>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> ConfigurationGetWithHttpMessagesAsync(string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a configuration value.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ConfigurationPostWithHttpMessagesAsync(CreateConfigurationValueRequest message = default(CreateConfigurationValueRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a configuration value.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ConfigurationByIdGetWithHttpMessagesAsync(string id, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a configuration value.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ConfigurationByIdPutWithHttpMessagesAsync(string id, UpdateConfigurationValueRequest message = default(UpdateConfigurationValueRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available contact types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> ContacttypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a contact type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ContacttypesPostWithHttpMessagesAsync(CreateContactTypeRequest message = default(CreateContactTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a contact type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ContacttypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a contact type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ContacttypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateContactTypeRequest message = default(UpdateContactTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available delegations.
    /// </summary>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<DelegationListQueryResult>>> ManageDelegationsGetWithHttpMessagesAsync(string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a delegation.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ManageDelegationsByIdGetWithHttpMessagesAsync(System.Guid id, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available delegation assignments.
    /// </summary>
    /// <param name='delegationId'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<DelegationAssignmentListQueryResult>>> ManageDelegationsByDelegationIdAssignmentsGetWithHttpMessagesAsync(System.Guid delegationId, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a delegation assignment for an organisation.
    /// </summary>
    /// <param name='delegationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ManageDelegationsByDelegationIdAssignmentsPostWithHttpMessagesAsync(System.Guid delegationId, AddDelegationAssignmentRequest message = default(AddDelegationAssignmentRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a delegation assignment.
    /// </summary>
    /// <param name='delegationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ManageDelegationsByDelegationIdAssignmentsByIdGetWithHttpMessagesAsync(System.Guid delegationId, System.Guid id, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a delegation assignment.
    /// </summary>
    /// <param name='delegationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ManageDelegationsByDelegationIdAssignmentsByIdPutWithHttpMessagesAsync(System.Guid delegationId, System.Guid id, UpdateDelegationAssignmentRequest message = default(UpdateDelegationAssignmentRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Remove a delegation assignment.
    /// </summary>
    /// <param name='delegationId'>
    /// </param>
    /// <param name='delegationAssignmentId'>
    /// </param>
    /// <param name='bodyId'>
    /// </param>
    /// <param name='bodySeatId'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ManageDelegationsByDelegationIdAssignmentsByDelegationAssignmentIdByBodyIdByBodySeatIdDeleteWithHttpMessagesAsync(System.Guid delegationId, System.Guid delegationAssignmentId, System.Guid bodyId, System.Guid bodySeatId, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all organisations.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<object>>> DumpsAgentschapZorgEnGezondheidFullGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all organisations.
    /// </summary>
    /// <param name='format'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<object>>> DumpsAgentschapZorgEnGezondheidFullformatGetWithHttpMessagesAsync(string format, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> GetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of events.
    /// </summary>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<EventListItem>>> EventsGetWithHttpMessagesAsync(string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get an event.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> EventsByIdGetWithHttpMessagesAsync(int id, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available formal frameworks.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> FormalframeworksGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a formal framework.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FormalframeworksPostWithHttpMessagesAsync(CreateFormalFrameworkRequest message = default(CreateFormalFrameworkRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available formal frameworks for vademecum report.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> FormalframeworksVademecumGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a formal framework.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FormalframeworksByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a formal framework.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FormalframeworksByIdPutWithHttpMessagesAsync(System.Guid id, UpdateFormalFrameworkRequest message = default(UpdateFormalFrameworkRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all bodies for a formal framework.
    /// </summary>
    /// <param name='id'>
    /// A formal framework GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsFormalframeworkbodiesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available formal framework categories.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> FormalframeworkcategoriesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a formal framework category.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FormalframeworkcategoriesPostWithHttpMessagesAsync(CreateFormalFrameworkCategoryRequest message = default(CreateFormalFrameworkCategoryRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a formal framework category.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FormalframeworkcategoriesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a formal framework category.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FormalframeworkcategoriesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateFormalFrameworkCategoryRequest message = default(UpdateFormalFrameworkCategoryRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all organisations for a formal framework.
    /// </summary>
    /// <param name='id'>
    /// A formal framework GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsFormalframeworkorganisationsByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all organisations for a formal framework.
    /// </summary>
    /// <param name='id'>
    /// A formal framework GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsFormalframeworkorganisationsByIdExtendedGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all organisations for a formal framework.
    /// </summary>
    /// <param name='id'>
    /// A formal framework GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsFormalframeworkorganisationsVademecumByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get gender ratio for a formalframework (grouped by body,
    /// organisation and bodyseat)
    /// </summary>
    /// <param name='formalFrameworkId'>
    /// A formal framework GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsFormalframeworkparticipationByFormalFrameworkIdGetWithHttpMessagesAsync(System.Guid formalFrameworkId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available function types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> FunctiontypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a function type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FunctiontypesPostWithHttpMessagesAsync(CreateFunctionTypeRequest message = default(CreateFunctionTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a function type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FunctiontypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a function type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> FunctiontypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateFunctionTypeRequest message = default(UpdateFunctionTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available key types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> KeytypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a key type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> KeytypesPostWithHttpMessagesAsync(CreateKeyTypeRequest message = default(CreateKeyTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a key type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> KeytypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a key type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> KeytypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateKeyTypeRequest message = default(UpdateKeyTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available label types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> LabeltypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a label type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LabeltypesPostWithHttpMessagesAsync(CreateLabelTypeRequest message = default(CreateLabelTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a label type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LabeltypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a label type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LabeltypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateLabelTypeRequest message = default(UpdateLabelTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available lifecyclephase types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> LifecyclephasetypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a lifecyclephase type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LifecyclephasetypesPostWithHttpMessagesAsync(CreateLifecyclePhaseTypeRequest message = default(CreateLifecyclePhaseTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a lifecyclephase type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LifecyclephasetypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a lifecyclephase type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LifecyclephasetypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateLifecyclePhaseTypeRequest message = default(UpdateLifecyclePhaseTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available location types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> LocationsGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a location.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LocationsPostWithHttpMessagesAsync(CreateLocationRequest message = default(CreateLocationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a location type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LocationsByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a location.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LocationsByIdPutWithHttpMessagesAsync(System.Guid id, UpdateLocationRequest message = default(UpdateLocationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available location types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> LocationtypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a location type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LocationtypesPostWithHttpMessagesAsync(CreateLocationTypeRequest message = default(CreateLocationTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a location type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LocationtypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a location type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> LocationtypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateLocationTypeRequest message = default(UpdateLocationTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available mandate role types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> MandateroletypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a mandate role type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> MandateroletypesPostWithHttpMessagesAsync(CreateMandateRoleTypeRequest message = default(CreateMandateRoleTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a mandate role type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> MandateroletypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a mandate role type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> MandateroletypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateMandateRoleTypeRequest message = default(UpdateMandateRoleTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available organisations.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<OrganisationListQueryResult>>> OrganisationsGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create an organisation.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsPostWithHttpMessagesAsync(CreateOrganisationRequest message = default(CreateOrganisationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get an organisation.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update an organisation.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByIdPutWithHttpMessagesAsync(System.Guid id, UpdateOrganisationInfoRequest message = default(UpdateOrganisationInfoRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available bankAccounts for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdBankAccountsGetWithHttpMessagesAsync(System.Guid organisationId, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Add a bankAccount to an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdBankAccountsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationBankAccountRequest message = default(AddOrganisationBankAccountRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a bankAccount for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdBankAccountsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a bankAccount for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdBankAccountsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationBankAccountRequest message = default(UpdateOrganisationBankAccountRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available bodies for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdBodiesGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available buildings for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdBuildingsGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Add a building to an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdBuildingsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationBuildingRequest message = default(AddOrganisationBuildingRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a building for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdBuildingsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a building for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdBuildingsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationBuildingRequest message = default(UpdateOrganisationBuildingRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available capacities for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdCapacitiesGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a capacity for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdCapacitiesPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationCapacityRequest message = default(AddOrganisationCapacityRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a capacity for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdCapacitiesByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a capacity for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdCapacitiesByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationCapacityRequest message = default(UpdateOrganisationCapacityRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available children for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdChildrenGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available organisation classifications.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationclassificationsGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create an organisation classification.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationclassificationsPostWithHttpMessagesAsync(CreateOrganisationClassificationRequest message = default(CreateOrganisationClassificationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get an organisation classification.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationclassificationsByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update an organisation classification.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationclassificationsByIdPutWithHttpMessagesAsync(System.Guid id, UpdateOrganisationClassificationRequest message = default(UpdateOrganisationClassificationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all organisations and their labels for a classification of
    /// classificationtype "Beleidsdomein".
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsClassificationorganisationsByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all classifications for classificationtype "Beleidsdomein".
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsPolicydomainclassificationsGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all classifications for classificationtype "Bevoegde minister".
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsResponsibleministerclassificationsGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get gender ratio for a classification organisation (grouped by
    /// body)
    /// </summary>
    /// <param name='classificationOrganisationId'>
    /// A classification organisation GUID identifier
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ReportsClassificationorganisationsparticipationByClassificationOrganisationIdGetWithHttpMessagesAsync(System.Guid classificationOrganisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available organisation classification types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationclassificationtypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create an organisation classification type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationclassificationtypesPostWithHttpMessagesAsync(CreateOrganisationClassificationTypeRequest message = default(CreateOrganisationClassificationTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get an organisation classificication type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationclassificationtypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update an organisation classification type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationclassificationtypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateOrganisationClassificationTypeRequest message = default(UpdateOrganisationClassificationTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available contacts for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdContactsGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a contact for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdContactsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationContactRequest message = default(AddOrganisationContactRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a contact for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdContactsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a contact for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdContactsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationContactRequest message = default(UpdateOrganisationContactRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available formal frameworks for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdFormalframeworksGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a formal framework for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdFormalframeworksPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationFormalFrameworkRequest message = default(AddOrganisationFormalFrameworkRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a formal framework for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdFormalframeworksByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a formal framework for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdFormalframeworksByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationFormalFrameworkRequest message = default(UpdateOrganisationFormalFrameworkRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available functions for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdFunctionsGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a function for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdFunctionsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationFunctionRequest message = default(AddOrganisationFunctionRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a function for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdFunctionsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a function for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdFunctionsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationFunctionRequest message = default(UpdateOrganisationFunctionRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available keys for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdKeysGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a key for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdKeysPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationKeyRequest message = default(AddOrganisationKeyRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a key for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdKeysByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a key for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdKeysByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationKeyRequest message = default(UpdateOrganisationKeyRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available labels for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdLabelsGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a label for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdLabelsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationLabelRequest message = default(AddOrganisationLabelRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a label for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdLabelsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a label for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdLabelsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationLabelRequest message = default(UpdateOrganisationLabelRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available locations for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdLocationsGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Add a location to an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdLocationsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationLocationRequest message = default(AddOrganisationLocationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a location for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdLocationsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a location for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdLocationsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationLocationRequest message = default(UpdateOrganisationLocationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available classifications for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdClassificationsGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a classification for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdClassificationsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationOrganisationClassificationRequest message = default(AddOrganisationOrganisationClassificationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a classification for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdClassificationsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a classification for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdClassificationsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationOrganisationClassificationRequest message = default(UpdateOrganisationOrganisationClassificationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available parents for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdParentsGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a parent for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdParentsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationParentRequest message = default(AddOrganisationParentRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a parent for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdParentsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a parent for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdParentsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationParentRequest message = default(UpdateOrganisationParentRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available relations for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationsByOrganisationIdRelationsGetWithHttpMessagesAsync(System.Guid organisationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a relation for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdRelationsPostWithHttpMessagesAsync(System.Guid organisationId, AddOrganisationRelationRequest message = default(AddOrganisationRelationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a relation for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdRelationsByIdGetWithHttpMessagesAsync(System.Guid organisationId, System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a relation for an organisation.
    /// </summary>
    /// <param name='organisationId'>
    /// </param>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationsByOrganisationIdRelationsByIdPutWithHttpMessagesAsync(System.Guid organisationId, string id, UpdateOrganisationRelationRequest message = default(UpdateOrganisationRelationRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available organisation relation types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OrganisationrelationtypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create an organisation relation type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationrelationtypesPostWithHttpMessagesAsync(CreateOrganisationRelationTypeRequest message = default(CreateOrganisationRelationTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get an organisation relation type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationrelationtypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update an organisation relation type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OrganisationrelationtypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateOrganisationRelationTypeRequest message = default(UpdateOrganisationRelationTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available people.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> PeopleGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a person.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> PeoplePostWithHttpMessagesAsync(CreatePersonRequest message = default(CreatePersonRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a person.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> PeopleByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a person.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> PeopleByIdPutWithHttpMessagesAsync(System.Guid id, UpdatePersonRequest message = default(UpdatePersonRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available capacities for a person.
    /// </summary>
    /// <param name='personId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> PeopleByPersonIdCapacitiesGetWithHttpMessagesAsync(System.Guid personId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available functions for a person.
    /// </summary>
    /// <param name='personId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> PeopleByPersonIdFunctionsGetWithHttpMessagesAsync(System.Guid personId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available mandates for a person.
    /// </summary>
    /// <param name='personId'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> PeopleByPersonIdMandatesGetWithHttpMessagesAsync(System.Guid personId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of projections.
    /// </summary>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<string>>> ProjectionsGetWithHttpMessagesAsync(string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available projection states.
    /// </summary>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ProjectionStateItem>>> ProjectionsStatesGetWithHttpMessagesAsync(string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a projection state by its id.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ProjectionStateItem>> ProjectionsStatesByIdGetWithHttpMessagesAsync(System.Guid id, string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ProjectionsStatesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateProjectionStateRequest message = default(UpdateProjectionStateRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get the max event number.
    /// </summary>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<int?>> ProjectionsStatesLastEventGetWithHttpMessagesAsync(string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available purposes.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> PurposesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a purpose.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> PurposesPostWithHttpMessagesAsync(CreatePurposeRequest message = default(CreatePurposeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a purpose.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> PurposesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a purpose.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> PurposesByIdPutWithHttpMessagesAsync(System.Guid id, UpdatePurposeRequest message = default(UpdatePurposeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search all organisations.
    /// </summary>
    /// <param name='indexName'>
    /// Elasticsearch index name
    /// </param>
    /// <param name='q'>
    /// Elasticsearch querystring search.
    /// </param>
    /// <param name='offset'>
    /// Elasticsearch starting index position.
    /// </param>
    /// <param name='limit'>
    /// Elasticsearch number of hits to return.
    /// </param>
    /// <param name='fields'>
    /// Elasticsearch source filter.
    /// </param>
    /// <param name='sort'>
    /// Elasticsearch sorting.
    /// </param>
    /// <param name='scroll'>
    /// Enable Elasticsearch scrolling.
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<OrganisationDocument>>> SearchByIndexNameGetWithHttpMessagesAsync(string indexName, string q = default(string), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search all organisations.
    /// </summary>
    /// <param name='indexName'>
    /// </param>
    /// <param name='q'>
    /// </param>
    /// <param name='offset'>
    /// </param>
    /// <param name='limit'>
    /// </param>
    /// <param name='fields'>
    /// </param>
    /// <param name='sort'>
    /// </param>
    /// <param name='scroll'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<OrganisationDocument>>> SearchByIndexNamePostWithHttpMessagesAsync(string indexName, object q = default(object), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search all organisations.
    /// </summary>
    /// <param name='indexName'>
    /// Elasticsearch index name
    /// </param>
    /// <param name='q'>
    /// Elasticsearch querystring search.
    /// </param>
    /// <param name='offset'>
    /// Elasticsearch starting index position.
    /// </param>
    /// <param name='limit'>
    /// Elasticsearch number of hits to return.
    /// </param>
    /// <param name='fields'>
    /// Elasticsearch source filter.
    /// </param>
    /// <param name='sort'>
    /// Elasticsearch sorting.
    /// </param>
    /// <param name='scroll'>
    /// Enable Elasticsearch scrolling.
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<OrganisationDocument>>> SearchBoxByIndexNameGetWithHttpMessagesAsync(string indexName, string q = default(string), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search all organisations.
    /// </summary>
    /// <param name='indexName'>
    /// Elasticsearch index name
    /// </param>
    /// <param name='id'>
    /// Elasticsearch scroll id.
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<OrganisationDocument>>> SearchByIndexNameScrollGetWithHttpMessagesAsync(string indexName, string id = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of available seat types.
    /// </summary>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> SeattypesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a seat type.
    /// </summary>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> SeattypesPostWithHttpMessagesAsync(CreateSeatTypeRequest message = default(CreateSeatTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a seat type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> SeattypesByIdGetWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a seat type.
    /// </summary>
    /// <param name='id'>
    /// </param>
    /// <param name='message'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> SeattypesByIdPutWithHttpMessagesAsync(System.Guid id, UpdateSeatTypeRequest message = default(UpdateSeatTypeRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> SecurityGetWithHttpMessagesAsync(string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> StatusGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <param name='daysBack'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> StatusExceptionsGetWithHttpMessagesAsync(int? daysBack = default(int?), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<TogglesConfiguration>> StatusTogglesGetWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <param name='daysBack'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> StatusStatsGetWithHttpMessagesAsync(int? daysBack = default(int?), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> StatusConfigurationGetWithHttpMessagesAsync(string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Executes a task.
    /// </summary>
    /// <param name='task'>
    /// </param>
    /// <param name='authorization'>
    /// bearer token
    /// </param>
    /// <param name='customHeaders'>
    /// The headers that will be added to request.
    /// </param>
    /// <param name='cancellationToken'>
    /// The cancellation token.
    /// </param>
    System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> TasksPostWithHttpMessagesAsync(TaskRequest task = default(TaskRequest), string authorization = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

}