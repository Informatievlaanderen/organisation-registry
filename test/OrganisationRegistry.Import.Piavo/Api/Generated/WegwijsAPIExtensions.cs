// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OrganisationRegistry.Import.Piavo
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for OrganisationRegistryAPI.
    /// </summary>
    public static partial class OrganisationRegistryAPIExtensions
    {
            /// <summary>
            /// Get a list of available bodies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<BodyListQueryResult> BodiesGet(this IOrganisationRegistryAPI operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available bodies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<BodyListQueryResult>> BodiesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesPost(this IOrganisationRegistryAPI operations, RegisterBodyRequest message = default(RegisterBodyRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesPostAsync(this IOrganisationRegistryAPI operations, RegisterBodyRequest message = default(RegisterBodyRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available contacts for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            public static void BodiesByBodyIdContactsGet(this IOrganisationRegistryAPI operations, System.Guid bodyId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdContactsGetAsync(bodyId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available contacts for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BodiesByBodyIdContactsGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BodiesByBodyIdContactsGetWithHttpMessagesAsync(bodyId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdContactsPost(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyContactRequest message = default(AddBodyContactRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdContactsPostAsync(bodyId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdContactsPostAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyContactRequest message = default(AddBodyContactRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdContactsPostWithHttpMessagesAsync(bodyId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a contact for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByBodyIdContactsByIdGet(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdContactsByIdGetAsync(bodyId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a contact for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdContactsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdContactsByIdGetWithHttpMessagesAsync(bodyId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdContactsByIdPut(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyContactRequest message = default(UpdateBodyContactRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdContactsByIdPutAsync(bodyId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdContactsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyContactRequest message = default(UpdateBodyContactRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdContactsByIdPutWithHttpMessagesAsync(bodyId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available formal frameworks for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            public static void BodiesByBodyIdFormalframeworksGet(this IOrganisationRegistryAPI operations, System.Guid bodyId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdFormalframeworksGetAsync(bodyId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available formal frameworks for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BodiesByBodyIdFormalframeworksGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BodiesByBodyIdFormalframeworksGetWithHttpMessagesAsync(bodyId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a formal framework for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdFormalframeworksPost(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyFormalFrameworkRequest message = default(AddBodyFormalFrameworkRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdFormalframeworksPostAsync(bodyId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a formal framework for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdFormalframeworksPostAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyFormalFrameworkRequest message = default(AddBodyFormalFrameworkRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdFormalframeworksPostWithHttpMessagesAsync(bodyId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a formal framework for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByBodyIdFormalframeworksByIdGet(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdFormalframeworksByIdGetAsync(bodyId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a formal framework for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdFormalframeworksByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdFormalframeworksByIdGetWithHttpMessagesAsync(bodyId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a formal framework for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdFormalframeworksByIdPut(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyFormalFrameworkRequest message = default(UpdateBodyFormalFrameworkRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdFormalframeworksByIdPutAsync(bodyId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a formal framework for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdFormalframeworksByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyFormalFrameworkRequest message = default(UpdateBodyFormalFrameworkRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdFormalframeworksByIdPutWithHttpMessagesAsync(bodyId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a body's information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByIdInfoGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByIdInfoGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a body's information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByIdInfoGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByIdInfoGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a body's info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByIdInfoPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateBodyInfoRequest message = default(UpdateBodyInfoRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByIdInfoPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a body's info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByIdInfoPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateBodyInfoRequest message = default(UpdateBodyInfoRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByIdInfoPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available lifecycle phases for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            public static void BodiesByBodyIdLifecyclephasesGet(this IOrganisationRegistryAPI operations, System.Guid bodyId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdLifecyclephasesGetAsync(bodyId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available lifecycle phases for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BodiesByBodyIdLifecyclephasesGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BodiesByBodyIdLifecyclephasesGetWithHttpMessagesAsync(bodyId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a lifecycle phase for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdLifecyclephasesPost(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyLifecyclePhaseRequest message = default(AddBodyLifecyclePhaseRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdLifecyclephasesPostAsync(bodyId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a lifecycle phase for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdLifecyclephasesPostAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyLifecyclePhaseRequest message = default(AddBodyLifecyclePhaseRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdLifecyclephasesPostWithHttpMessagesAsync(bodyId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a lifecycle phase for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByBodyIdLifecyclephasesByIdGet(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdLifecyclephasesByIdGetAsync(bodyId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a lifecycle phase for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdLifecyclephasesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdLifecyclephasesByIdGetWithHttpMessagesAsync(bodyId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a lifecycle phase for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdLifecyclephasesByIdPut(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyLifecyclePhaseRequest message = default(UpdateBodyLifecyclePhaseRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdLifecyclephasesByIdPutAsync(bodyId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a lifecycle phase for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdLifecyclephasesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyLifecyclePhaseRequest message = default(UpdateBodyLifecyclePhaseRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdLifecyclephasesByIdPutWithHttpMessagesAsync(bodyId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available mandates for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            public static void BodiesByBodyIdMandatesGet(this IOrganisationRegistryAPI operations, System.Guid bodyId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdMandatesGetAsync(bodyId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available mandates for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BodiesByBodyIdMandatesGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BodiesByBodyIdMandatesGetWithHttpMessagesAsync(bodyId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a mandate for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdMandatesPost(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyMandateRequest message = default(AddBodyMandateRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdMandatesPostAsync(bodyId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a mandate for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdMandatesPostAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyMandateRequest message = default(AddBodyMandateRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdMandatesPostWithHttpMessagesAsync(bodyId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a mandate for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByBodyIdMandatesByIdGet(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdMandatesByIdGetAsync(bodyId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a mandate for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdMandatesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdMandatesByIdGetWithHttpMessagesAsync(bodyId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a mandate for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdMandatesByIdPut(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyMandateRequest message = default(UpdateBodyMandateRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdMandatesByIdPutAsync(bodyId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a mandate for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdMandatesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyMandateRequest message = default(UpdateBodyMandateRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdMandatesByIdPutWithHttpMessagesAsync(bodyId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available organisations for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            public static void BodiesByBodyIdOrganisationsGet(this IOrganisationRegistryAPI operations, System.Guid bodyId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdOrganisationsGetAsync(bodyId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available organisations for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BodiesByBodyIdOrganisationsGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BodiesByBodyIdOrganisationsGetWithHttpMessagesAsync(bodyId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Link an organisation to a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdOrganisationsPost(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyOrganisationRequest message = default(AddBodyOrganisationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdOrganisationsPostAsync(bodyId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Link an organisation to a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdOrganisationsPostAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodyOrganisationRequest message = default(AddBodyOrganisationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdOrganisationsPostWithHttpMessagesAsync(bodyId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an organisation for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByBodyIdOrganisationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdOrganisationsByIdGetAsync(bodyId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an organisation for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdOrganisationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdOrganisationsByIdGetWithHttpMessagesAsync(bodyId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an organisation for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdOrganisationsByIdPut(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyOrganisationRequest message = default(UpdateBodyOrganisationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdOrganisationsByIdPutAsync(bodyId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an organisation for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdOrganisationsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodyOrganisationRequest message = default(UpdateBodyOrganisationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdOrganisationsByIdPutWithHttpMessagesAsync(bodyId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get gender ratio for a body (grouped by body and bodyseat)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// A body GUID identifier
            /// </param>
            public static object ReportsBodyparticipationByBodyIdGet(this IOrganisationRegistryAPI operations, System.Guid bodyId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsBodyparticipationByBodyIdGetAsync(bodyId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get gender ratio for a body (grouped by body and bodyseat)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// A body GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsBodyparticipationByBodyIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsBodyparticipationByBodyIdGetWithHttpMessagesAsync(bodyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get gender ratio totals for a body (grouped by body)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// A body GUID identifier
            /// </param>
            public static object ReportsBodyparticipationByBodyIdTotalsGet(this IOrganisationRegistryAPI operations, System.Guid bodyId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsBodyparticipationByBodyIdTotalsGetAsync(bodyId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get gender ratio totals for a body (grouped by body)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// A body GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsBodyparticipationByBodyIdTotalsGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsBodyparticipationByBodyIdTotalsGetWithHttpMessagesAsync(bodyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available seats for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            public static void BodiesByBodyIdSeatsGet(this IOrganisationRegistryAPI operations, System.Guid bodyId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdSeatsGetAsync(bodyId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available seats for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BodiesByBodyIdSeatsGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BodiesByBodyIdSeatsGetWithHttpMessagesAsync(bodyId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a seat for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdSeatsPost(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodySeatRequest message = default(AddBodySeatRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdSeatsPostAsync(bodyId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a seat for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdSeatsPostAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, AddBodySeatRequest message = default(AddBodySeatRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdSeatsPostWithHttpMessagesAsync(bodyId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a seat for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByBodyIdSeatsByIdGet(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdSeatsByIdGetAsync(bodyId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a seat for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdSeatsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdSeatsByIdGetWithHttpMessagesAsync(bodyId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a seat for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByBodyIdSeatsByIdPut(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodySeatRequest message = default(UpdateBodySeatRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByBodyIdSeatsByIdPutAsync(bodyId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a seat for a body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByBodyIdSeatsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid bodyId, string id, UpdateBodySeatRequest message = default(UpdateBodySeatRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByBodyIdSeatsByIdPutWithHttpMessagesAsync(bodyId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a body's validity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BodiesByIdValidityGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByIdValidityGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a body's validity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByIdValidityGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByIdValidityGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a body's validity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BodiesByIdValidityPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateBodyValidityRequest message = default(UpdateBodyValidityRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BodiesByIdValidityPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a body's validity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BodiesByIdValidityPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateBodyValidityRequest message = default(UpdateBodyValidityRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BodiesByIdValidityPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available buildings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void BuildingsGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BuildingsGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available buildings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BuildingsGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BuildingsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a building.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BuildingsPost(this IOrganisationRegistryAPI operations, CreateBuildingRequest message = default(CreateBuildingRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BuildingsPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a building.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BuildingsPostAsync(this IOrganisationRegistryAPI operations, CreateBuildingRequest message = default(CreateBuildingRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BuildingsPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a building.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object BuildingsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BuildingsByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a building.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BuildingsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BuildingsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a building.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object BuildingsByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateBuildingRequest message = default(UpdateBuildingRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).BuildingsByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a building.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> BuildingsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateBuildingRequest message = default(UpdateBuildingRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BuildingsByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all organisations for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            public static object ReportsBuildingorganisationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsBuildingorganisationsByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all organisations for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsBuildingorganisationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsBuildingorganisationsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available capacities.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void CapacitiesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).CapacitiesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available capacities.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task CapacitiesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.CapacitiesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a capacity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object CapacitiesPost(this IOrganisationRegistryAPI operations, CreateCapacityRequest message = default(CreateCapacityRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).CapacitiesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a capacity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CapacitiesPostAsync(this IOrganisationRegistryAPI operations, CreateCapacityRequest message = default(CreateCapacityRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CapacitiesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a capacity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object CapacitiesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).CapacitiesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a capacity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CapacitiesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CapacitiesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a capacity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object CapacitiesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateCapacityRequest message = default(UpdateCapacityRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).CapacitiesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a capacity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CapacitiesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateCapacityRequest message = default(UpdateCapacityRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CapacitiesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all persons for a capacity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A capacity GUID identifier
            /// </param>
            public static object ReportsCapacitypersonsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsCapacitypersonsByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all persons for a capacity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A capacity GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsCapacitypersonsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsCapacitypersonsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available configuration values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static void ConfigurationGet(this IOrganisationRegistryAPI operations, string authorization = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ConfigurationGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available configuration values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ConfigurationGetAsync(this IOrganisationRegistryAPI operations, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ConfigurationGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a configuration value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ConfigurationPost(this IOrganisationRegistryAPI operations, CreateConfigurationValueRequest message = default(CreateConfigurationValueRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ConfigurationPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a configuration value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ConfigurationPostAsync(this IOrganisationRegistryAPI operations, CreateConfigurationValueRequest message = default(CreateConfigurationValueRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ConfigurationPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a configuration value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ConfigurationByIdGet(this IOrganisationRegistryAPI operations, string id, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ConfigurationByIdGetAsync(id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a configuration value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ConfigurationByIdGetAsync(this IOrganisationRegistryAPI operations, string id, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ConfigurationByIdGetWithHttpMessagesAsync(id, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a configuration value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ConfigurationByIdPut(this IOrganisationRegistryAPI operations, string id, UpdateConfigurationValueRequest message = default(UpdateConfigurationValueRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ConfigurationByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a configuration value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ConfigurationByIdPutAsync(this IOrganisationRegistryAPI operations, string id, UpdateConfigurationValueRequest message = default(UpdateConfigurationValueRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ConfigurationByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available contact types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ContacttypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ContacttypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available contact types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ContacttypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ContacttypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a contact type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ContacttypesPost(this IOrganisationRegistryAPI operations, CreateContactTypeRequest message = default(CreateContactTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ContacttypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a contact type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ContacttypesPostAsync(this IOrganisationRegistryAPI operations, CreateContactTypeRequest message = default(CreateContactTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ContacttypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a contact type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object ContacttypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ContacttypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a contact type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ContacttypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ContacttypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a contact type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ContacttypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateContactTypeRequest message = default(UpdateContactTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ContacttypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a contact type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ContacttypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateContactTypeRequest message = default(UpdateContactTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ContacttypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available delegations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static System.Collections.Generic.IList<DelegationListQueryResult> ManageDelegationsGet(this IOrganisationRegistryAPI operations, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ManageDelegationsGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available delegations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<DelegationListQueryResult>> ManageDelegationsGetAsync(this IOrganisationRegistryAPI operations, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ManageDelegationsGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a delegation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ManageDelegationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ManageDelegationsByIdGetAsync(id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a delegation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ManageDelegationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ManageDelegationsByIdGetWithHttpMessagesAsync(id, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available delegation assignments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static System.Collections.Generic.IList<DelegationAssignmentListQueryResult> ManageDelegationsByDelegationIdAssignmentsGet(this IOrganisationRegistryAPI operations, System.Guid delegationId, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ManageDelegationsByDelegationIdAssignmentsGetAsync(delegationId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available delegation assignments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<DelegationAssignmentListQueryResult>> ManageDelegationsByDelegationIdAssignmentsGetAsync(this IOrganisationRegistryAPI operations, System.Guid delegationId, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ManageDelegationsByDelegationIdAssignmentsGetWithHttpMessagesAsync(delegationId, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a delegation assignment for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ManageDelegationsByDelegationIdAssignmentsPost(this IOrganisationRegistryAPI operations, System.Guid delegationId, AddDelegationAssignmentRequest message = default(AddDelegationAssignmentRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ManageDelegationsByDelegationIdAssignmentsPostAsync(delegationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a delegation assignment for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ManageDelegationsByDelegationIdAssignmentsPostAsync(this IOrganisationRegistryAPI operations, System.Guid delegationId, AddDelegationAssignmentRequest message = default(AddDelegationAssignmentRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ManageDelegationsByDelegationIdAssignmentsPostWithHttpMessagesAsync(delegationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a delegation assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ManageDelegationsByDelegationIdAssignmentsByIdGet(this IOrganisationRegistryAPI operations, System.Guid delegationId, System.Guid id, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ManageDelegationsByDelegationIdAssignmentsByIdGetAsync(delegationId, id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a delegation assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ManageDelegationsByDelegationIdAssignmentsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid delegationId, System.Guid id, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ManageDelegationsByDelegationIdAssignmentsByIdGetWithHttpMessagesAsync(delegationId, id, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a delegation assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ManageDelegationsByDelegationIdAssignmentsByIdPut(this IOrganisationRegistryAPI operations, System.Guid delegationId, System.Guid id, UpdateDelegationAssignmentRequest message = default(UpdateDelegationAssignmentRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ManageDelegationsByDelegationIdAssignmentsByIdPutAsync(delegationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a delegation assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ManageDelegationsByDelegationIdAssignmentsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid delegationId, System.Guid id, UpdateDelegationAssignmentRequest message = default(UpdateDelegationAssignmentRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ManageDelegationsByDelegationIdAssignmentsByIdPutWithHttpMessagesAsync(delegationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a delegation assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='delegationAssignmentId'>
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='bodySeatId'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ManageDelegationsByDelegationIdAssignmentsByDelegationAssignmentIdByBodyIdByBodySeatIdDelete(this IOrganisationRegistryAPI operations, System.Guid delegationId, System.Guid delegationAssignmentId, System.Guid bodyId, System.Guid bodySeatId, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ManageDelegationsByDelegationIdAssignmentsByDelegationAssignmentIdByBodyIdByBodySeatIdDeleteAsync(delegationId, delegationAssignmentId, bodyId, bodySeatId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a delegation assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegationId'>
            /// </param>
            /// <param name='delegationAssignmentId'>
            /// </param>
            /// <param name='bodyId'>
            /// </param>
            /// <param name='bodySeatId'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ManageDelegationsByDelegationIdAssignmentsByDelegationAssignmentIdByBodyIdByBodySeatIdDeleteAsync(this IOrganisationRegistryAPI operations, System.Guid delegationId, System.Guid delegationAssignmentId, System.Guid bodyId, System.Guid bodySeatId, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ManageDelegationsByDelegationIdAssignmentsByDelegationAssignmentIdByBodyIdByBodySeatIdDeleteWithHttpMessagesAsync(delegationId, delegationAssignmentId, bodyId, bodySeatId, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<object> DumpsAgentschapZorgEnGezondheidFullGet(this IOrganisationRegistryAPI operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).DumpsAgentschapZorgEnGezondheidFullGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<object>> DumpsAgentschapZorgEnGezondheidFullGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DumpsAgentschapZorgEnGezondheidFullGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='format'>
            /// </param>
            public static System.Collections.Generic.IList<object> DumpsAgentschapZorgEnGezondheidFullformatGet(this IOrganisationRegistryAPI operations, string format)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).DumpsAgentschapZorgEnGezondheidFullformatGetAsync(format), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='format'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<object>> DumpsAgentschapZorgEnGezondheidFullformatGetAsync(this IOrganisationRegistryAPI operations, string format, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DumpsAgentschapZorgEnGezondheidFullformatGetWithHttpMessagesAsync(format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Get(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).GetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task GetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a list of events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static System.Collections.Generic.IList<EventListItem> EventsGet(this IOrganisationRegistryAPI operations, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).EventsGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<EventListItem>> EventsGetAsync(this IOrganisationRegistryAPI operations, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EventsGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object EventsByIdGet(this IOrganisationRegistryAPI operations, int id, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).EventsByIdGetAsync(id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> EventsByIdGetAsync(this IOrganisationRegistryAPI operations, int id, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EventsByIdGetWithHttpMessagesAsync(id, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available formal frameworks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void FormalframeworksGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworksGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available formal frameworks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task FormalframeworksGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.FormalframeworksGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object FormalframeworksPost(this IOrganisationRegistryAPI operations, CreateFormalFrameworkRequest message = default(CreateFormalFrameworkRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworksPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FormalframeworksPostAsync(this IOrganisationRegistryAPI operations, CreateFormalFrameworkRequest message = default(CreateFormalFrameworkRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FormalframeworksPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available formal frameworks for vademecum report.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void FormalframeworksVademecumGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworksVademecumGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available formal frameworks for vademecum report.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task FormalframeworksVademecumGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.FormalframeworksVademecumGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object FormalframeworksByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworksByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FormalframeworksByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FormalframeworksByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object FormalframeworksByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateFormalFrameworkRequest message = default(UpdateFormalFrameworkRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworksByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FormalframeworksByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateFormalFrameworkRequest message = default(UpdateFormalFrameworkRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FormalframeworksByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all bodies for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            public static object ReportsFormalframeworkbodiesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsFormalframeworkbodiesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all bodies for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsFormalframeworkbodiesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsFormalframeworkbodiesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available formal framework categories.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void FormalframeworkcategoriesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworkcategoriesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available formal framework categories.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task FormalframeworkcategoriesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.FormalframeworkcategoriesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a formal framework category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object FormalframeworkcategoriesPost(this IOrganisationRegistryAPI operations, CreateFormalFrameworkCategoryRequest message = default(CreateFormalFrameworkCategoryRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworkcategoriesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a formal framework category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FormalframeworkcategoriesPostAsync(this IOrganisationRegistryAPI operations, CreateFormalFrameworkCategoryRequest message = default(CreateFormalFrameworkCategoryRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FormalframeworkcategoriesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a formal framework category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object FormalframeworkcategoriesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworkcategoriesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a formal framework category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FormalframeworkcategoriesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FormalframeworkcategoriesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a formal framework category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object FormalframeworkcategoriesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateFormalFrameworkCategoryRequest message = default(UpdateFormalFrameworkCategoryRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FormalframeworkcategoriesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a formal framework category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FormalframeworkcategoriesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateFormalFrameworkCategoryRequest message = default(UpdateFormalFrameworkCategoryRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FormalframeworkcategoriesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all organisations for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            public static object ReportsFormalframeworkorganisationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsFormalframeworkorganisationsByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all organisations for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsFormalframeworkorganisationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsFormalframeworkorganisationsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all organisations for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            public static object ReportsFormalframeworkorganisationsByIdExtendedGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsFormalframeworkorganisationsByIdExtendedGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all organisations for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsFormalframeworkorganisationsByIdExtendedGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsFormalframeworkorganisationsByIdExtendedGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all organisations for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            public static object ReportsFormalframeworkorganisationsVademecumByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsFormalframeworkorganisationsVademecumByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all organisations for a formal framework.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// A formal framework GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsFormalframeworkorganisationsVademecumByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsFormalframeworkorganisationsVademecumByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get gender ratio for a formalframework (grouped by body, organisation and
            /// bodyseat)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formalFrameworkId'>
            /// A formal framework GUID identifier
            /// </param>
            public static object ReportsFormalframeworkparticipationByFormalFrameworkIdGet(this IOrganisationRegistryAPI operations, System.Guid formalFrameworkId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsFormalframeworkparticipationByFormalFrameworkIdGetAsync(formalFrameworkId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get gender ratio for a formalframework (grouped by body, organisation and
            /// bodyseat)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='formalFrameworkId'>
            /// A formal framework GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsFormalframeworkparticipationByFormalFrameworkIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid formalFrameworkId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsFormalframeworkparticipationByFormalFrameworkIdGetWithHttpMessagesAsync(formalFrameworkId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available function types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void FunctiontypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FunctiontypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available function types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task FunctiontypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.FunctiontypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a function type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object FunctiontypesPost(this IOrganisationRegistryAPI operations, CreateFunctionTypeRequest message = default(CreateFunctionTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FunctiontypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a function type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FunctiontypesPostAsync(this IOrganisationRegistryAPI operations, CreateFunctionTypeRequest message = default(CreateFunctionTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FunctiontypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a function type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object FunctiontypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FunctiontypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a function type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FunctiontypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FunctiontypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a function type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object FunctiontypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateFunctionTypeRequest message = default(UpdateFunctionTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).FunctiontypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a function type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> FunctiontypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateFunctionTypeRequest message = default(UpdateFunctionTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FunctiontypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available key types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void KeytypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).KeytypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available key types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task KeytypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.KeytypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a key type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object KeytypesPost(this IOrganisationRegistryAPI operations, CreateKeyTypeRequest message = default(CreateKeyTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).KeytypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a key type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> KeytypesPostAsync(this IOrganisationRegistryAPI operations, CreateKeyTypeRequest message = default(CreateKeyTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.KeytypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a key type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object KeytypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).KeytypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a key type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> KeytypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.KeytypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a key type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object KeytypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateKeyTypeRequest message = default(UpdateKeyTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).KeytypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a key type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> KeytypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateKeyTypeRequest message = default(UpdateKeyTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.KeytypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available label types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void LabeltypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LabeltypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available label types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task LabeltypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.LabeltypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a label type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object LabeltypesPost(this IOrganisationRegistryAPI operations, CreateLabelTypeRequest message = default(CreateLabelTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LabeltypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a label type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LabeltypesPostAsync(this IOrganisationRegistryAPI operations, CreateLabelTypeRequest message = default(CreateLabelTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LabeltypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a label type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object LabeltypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LabeltypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a label type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LabeltypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LabeltypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a label type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object LabeltypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateLabelTypeRequest message = default(UpdateLabelTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LabeltypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a label type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LabeltypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateLabelTypeRequest message = default(UpdateLabelTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LabeltypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available lifecyclephase types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void LifecyclephasetypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LifecyclephasetypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available lifecyclephase types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task LifecyclephasetypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.LifecyclephasetypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a lifecyclephase type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object LifecyclephasetypesPost(this IOrganisationRegistryAPI operations, CreateLifecyclePhaseTypeRequest message = default(CreateLifecyclePhaseTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LifecyclephasetypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a lifecyclephase type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LifecyclephasetypesPostAsync(this IOrganisationRegistryAPI operations, CreateLifecyclePhaseTypeRequest message = default(CreateLifecyclePhaseTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LifecyclephasetypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a lifecyclephase type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object LifecyclephasetypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LifecyclephasetypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a lifecyclephase type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LifecyclephasetypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LifecyclephasetypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a lifecyclephase type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object LifecyclephasetypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateLifecyclePhaseTypeRequest message = default(UpdateLifecyclePhaseTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LifecyclephasetypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a lifecyclephase type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LifecyclephasetypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateLifecyclePhaseTypeRequest message = default(UpdateLifecyclePhaseTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LifecyclephasetypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available location types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void LocationsGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LocationsGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available location types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task LocationsGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.LocationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object LocationsPost(this IOrganisationRegistryAPI operations, CreateLocationRequest message = default(CreateLocationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LocationsPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LocationsPostAsync(this IOrganisationRegistryAPI operations, CreateLocationRequest message = default(CreateLocationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LocationsPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a location type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object LocationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LocationsByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a location type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LocationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LocationsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object LocationsByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateLocationRequest message = default(UpdateLocationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LocationsByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LocationsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateLocationRequest message = default(UpdateLocationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LocationsByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available location types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void LocationtypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LocationtypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available location types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task LocationtypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.LocationtypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a location type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object LocationtypesPost(this IOrganisationRegistryAPI operations, CreateLocationTypeRequest message = default(CreateLocationTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LocationtypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a location type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LocationtypesPostAsync(this IOrganisationRegistryAPI operations, CreateLocationTypeRequest message = default(CreateLocationTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LocationtypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a location type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object LocationtypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LocationtypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a location type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LocationtypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LocationtypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a location type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object LocationtypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateLocationTypeRequest message = default(UpdateLocationTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).LocationtypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a location type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> LocationtypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateLocationTypeRequest message = default(UpdateLocationTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LocationtypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available mandate role types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void MandateroletypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).MandateroletypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available mandate role types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task MandateroletypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.MandateroletypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a mandate role type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object MandateroletypesPost(this IOrganisationRegistryAPI operations, CreateMandateRoleTypeRequest message = default(CreateMandateRoleTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).MandateroletypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a mandate role type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> MandateroletypesPostAsync(this IOrganisationRegistryAPI operations, CreateMandateRoleTypeRequest message = default(CreateMandateRoleTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.MandateroletypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a mandate role type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object MandateroletypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).MandateroletypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a mandate role type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> MandateroletypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.MandateroletypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a mandate role type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object MandateroletypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateMandateRoleTypeRequest message = default(UpdateMandateRoleTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).MandateroletypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a mandate role type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> MandateroletypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateMandateRoleTypeRequest message = default(UpdateMandateRoleTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.MandateroletypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<OrganisationListQueryResult> OrganisationsGet(this IOrganisationRegistryAPI operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrganisationListQueryResult>> OrganisationsGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsPost(this IOrganisationRegistryAPI operations, CreateOrganisationRequest message = default(CreateOrganisationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsPostAsync(this IOrganisationRegistryAPI operations, CreateOrganisationRequest message = default(CreateOrganisationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateOrganisationInfoRequest message = default(UpdateOrganisationInfoRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateOrganisationInfoRequest message = default(UpdateOrganisationInfoRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available bankAccounts for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static void OrganisationsByOrganisationIdBankAccountsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, string authorization = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBankAccountsGetAsync(organisationId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available bankAccounts for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdBankAccountsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdBankAccountsGetWithHttpMessagesAsync(organisationId, authorization, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a bankAccount to an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdBankAccountsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationBankAccountRequest message = default(AddOrganisationBankAccountRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBankAccountsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a bankAccount to an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdBankAccountsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationBankAccountRequest message = default(AddOrganisationBankAccountRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdBankAccountsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a bankAccount for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdBankAccountsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBankAccountsByIdGetAsync(organisationId, id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a bankAccount for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdBankAccountsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdBankAccountsByIdGetWithHttpMessagesAsync(organisationId, id, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a bankAccount for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdBankAccountsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationBankAccountRequest message = default(UpdateOrganisationBankAccountRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBankAccountsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a bankAccount for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdBankAccountsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationBankAccountRequest message = default(UpdateOrganisationBankAccountRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdBankAccountsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available bodies for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdBodiesGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBodiesGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available bodies for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdBodiesGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdBodiesGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a list of available buildings for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdBuildingsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBuildingsGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available buildings for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdBuildingsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdBuildingsGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a building to an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdBuildingsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationBuildingRequest message = default(AddOrganisationBuildingRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBuildingsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a building to an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdBuildingsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationBuildingRequest message = default(AddOrganisationBuildingRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdBuildingsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a building for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdBuildingsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBuildingsByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a building for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdBuildingsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdBuildingsByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a building for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdBuildingsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationBuildingRequest message = default(UpdateOrganisationBuildingRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdBuildingsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a building for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdBuildingsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationBuildingRequest message = default(UpdateOrganisationBuildingRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdBuildingsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available capacities for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdCapacitiesGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdCapacitiesGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available capacities for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdCapacitiesGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdCapacitiesGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a capacity for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdCapacitiesPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationCapacityRequest message = default(AddOrganisationCapacityRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdCapacitiesPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a capacity for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdCapacitiesPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationCapacityRequest message = default(AddOrganisationCapacityRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdCapacitiesPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a capacity for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdCapacitiesByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdCapacitiesByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a capacity for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdCapacitiesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdCapacitiesByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a capacity for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdCapacitiesByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationCapacityRequest message = default(UpdateOrganisationCapacityRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdCapacitiesByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a capacity for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdCapacitiesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationCapacityRequest message = default(UpdateOrganisationCapacityRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdCapacitiesByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available children for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdChildrenGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdChildrenGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available children for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdChildrenGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdChildrenGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a list of available organisation classifications.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void OrganisationclassificationsGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationclassificationsGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available organisation classifications.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationclassificationsGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationclassificationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create an organisation classification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationclassificationsPost(this IOrganisationRegistryAPI operations, CreateOrganisationClassificationRequest message = default(CreateOrganisationClassificationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationclassificationsPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an organisation classification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationclassificationsPostAsync(this IOrganisationRegistryAPI operations, CreateOrganisationClassificationRequest message = default(CreateOrganisationClassificationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationclassificationsPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an organisation classification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationclassificationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationclassificationsByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an organisation classification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationclassificationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationclassificationsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an organisation classification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationclassificationsByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateOrganisationClassificationRequest message = default(UpdateOrganisationClassificationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationclassificationsByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an organisation classification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationclassificationsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateOrganisationClassificationRequest message = default(UpdateOrganisationClassificationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationclassificationsByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all organisations and their labels for a classification of
            /// classificationtype "Beleidsdomein".
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object ReportsClassificationorganisationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsClassificationorganisationsByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all organisations and their labels for a classification of
            /// classificationtype "Beleidsdomein".
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsClassificationorganisationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsClassificationorganisationsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all classifications for classificationtype "Beleidsdomein".
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ReportsPolicydomainclassificationsGet(this IOrganisationRegistryAPI operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsPolicydomainclassificationsGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all classifications for classificationtype "Beleidsdomein".
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsPolicydomainclassificationsGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsPolicydomainclassificationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all classifications for classificationtype "Bevoegde minister".
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ReportsResponsibleministerclassificationsGet(this IOrganisationRegistryAPI operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsResponsibleministerclassificationsGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all classifications for classificationtype "Bevoegde minister".
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsResponsibleministerclassificationsGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsResponsibleministerclassificationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get gender ratio for a classification organisation (grouped by body)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classificationOrganisationId'>
            /// A classification organisation GUID identifier
            /// </param>
            public static object ReportsClassificationorganisationsparticipationByClassificationOrganisationIdGet(this IOrganisationRegistryAPI operations, System.Guid classificationOrganisationId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ReportsClassificationorganisationsparticipationByClassificationOrganisationIdGetAsync(classificationOrganisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get gender ratio for a classification organisation (grouped by body)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classificationOrganisationId'>
            /// A classification organisation GUID identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ReportsClassificationorganisationsparticipationByClassificationOrganisationIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid classificationOrganisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReportsClassificationorganisationsparticipationByClassificationOrganisationIdGetWithHttpMessagesAsync(classificationOrganisationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available organisation classification types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void OrganisationclassificationtypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationclassificationtypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available organisation classification types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationclassificationtypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationclassificationtypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create an organisation classification type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationclassificationtypesPost(this IOrganisationRegistryAPI operations, CreateOrganisationClassificationTypeRequest message = default(CreateOrganisationClassificationTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationclassificationtypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an organisation classification type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationclassificationtypesPostAsync(this IOrganisationRegistryAPI operations, CreateOrganisationClassificationTypeRequest message = default(CreateOrganisationClassificationTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationclassificationtypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an organisation classificication type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationclassificationtypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationclassificationtypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an organisation classificication type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationclassificationtypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationclassificationtypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an organisation classification type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationclassificationtypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateOrganisationClassificationTypeRequest message = default(UpdateOrganisationClassificationTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationclassificationtypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an organisation classification type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationclassificationtypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateOrganisationClassificationTypeRequest message = default(UpdateOrganisationClassificationTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationclassificationtypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available contacts for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdContactsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdContactsGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available contacts for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdContactsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdContactsGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdContactsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationContactRequest message = default(AddOrganisationContactRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdContactsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdContactsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationContactRequest message = default(AddOrganisationContactRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdContactsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdContactsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdContactsByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdContactsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdContactsByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdContactsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationContactRequest message = default(UpdateOrganisationContactRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdContactsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a contact for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdContactsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationContactRequest message = default(UpdateOrganisationContactRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdContactsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available formal frameworks for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdFormalframeworksGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdFormalframeworksGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available formal frameworks for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdFormalframeworksGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdFormalframeworksGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a formal framework for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdFormalframeworksPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationFormalFrameworkRequest message = default(AddOrganisationFormalFrameworkRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdFormalframeworksPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a formal framework for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdFormalframeworksPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationFormalFrameworkRequest message = default(AddOrganisationFormalFrameworkRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdFormalframeworksPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a formal framework for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdFormalframeworksByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdFormalframeworksByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a formal framework for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdFormalframeworksByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdFormalframeworksByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a formal framework for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdFormalframeworksByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationFormalFrameworkRequest message = default(UpdateOrganisationFormalFrameworkRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdFormalframeworksByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a formal framework for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdFormalframeworksByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationFormalFrameworkRequest message = default(UpdateOrganisationFormalFrameworkRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdFormalframeworksByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available functions for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdFunctionsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdFunctionsGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available functions for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdFunctionsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdFunctionsGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a function for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdFunctionsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationFunctionRequest message = default(AddOrganisationFunctionRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdFunctionsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a function for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdFunctionsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationFunctionRequest message = default(AddOrganisationFunctionRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdFunctionsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a function for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdFunctionsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdFunctionsByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a function for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdFunctionsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdFunctionsByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a function for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdFunctionsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationFunctionRequest message = default(UpdateOrganisationFunctionRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdFunctionsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a function for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdFunctionsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationFunctionRequest message = default(UpdateOrganisationFunctionRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdFunctionsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available keys for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdKeysGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdKeysGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available keys for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdKeysGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdKeysGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a key for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdKeysPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationKeyRequest message = default(AddOrganisationKeyRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdKeysPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a key for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdKeysPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationKeyRequest message = default(AddOrganisationKeyRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdKeysPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a key for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdKeysByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdKeysByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a key for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdKeysByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdKeysByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a key for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdKeysByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationKeyRequest message = default(UpdateOrganisationKeyRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdKeysByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a key for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdKeysByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationKeyRequest message = default(UpdateOrganisationKeyRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdKeysByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available labels for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdLabelsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdLabelsGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available labels for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdLabelsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdLabelsGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a label for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdLabelsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationLabelRequest message = default(AddOrganisationLabelRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdLabelsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a label for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdLabelsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationLabelRequest message = default(AddOrganisationLabelRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdLabelsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a label for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdLabelsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdLabelsByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a label for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdLabelsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdLabelsByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a label for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdLabelsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationLabelRequest message = default(UpdateOrganisationLabelRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdLabelsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a label for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdLabelsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationLabelRequest message = default(UpdateOrganisationLabelRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdLabelsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available locations for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdLocationsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdLocationsGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available locations for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdLocationsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdLocationsGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a location to an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdLocationsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationLocationRequest message = default(AddOrganisationLocationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdLocationsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a location to an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdLocationsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationLocationRequest message = default(AddOrganisationLocationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdLocationsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a location for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdLocationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdLocationsByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a location for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdLocationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdLocationsByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a location for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdLocationsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationLocationRequest message = default(UpdateOrganisationLocationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdLocationsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a location for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdLocationsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationLocationRequest message = default(UpdateOrganisationLocationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdLocationsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available classifications for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdClassificationsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdClassificationsGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available classifications for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdClassificationsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdClassificationsGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a classification for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdClassificationsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationOrganisationClassificationRequest message = default(AddOrganisationOrganisationClassificationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdClassificationsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a classification for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdClassificationsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationOrganisationClassificationRequest message = default(AddOrganisationOrganisationClassificationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdClassificationsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a classification for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdClassificationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdClassificationsByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a classification for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdClassificationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdClassificationsByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a classification for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdClassificationsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationOrganisationClassificationRequest message = default(UpdateOrganisationOrganisationClassificationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdClassificationsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a classification for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdClassificationsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationOrganisationClassificationRequest message = default(UpdateOrganisationOrganisationClassificationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdClassificationsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available parents for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdParentsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdParentsGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available parents for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdParentsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdParentsGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a parent for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdParentsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationParentRequest message = default(AddOrganisationParentRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdParentsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a parent for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdParentsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationParentRequest message = default(AddOrganisationParentRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdParentsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a parent for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdParentsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdParentsByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a parent for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdParentsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdParentsByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a parent for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdParentsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationParentRequest message = default(UpdateOrganisationParentRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdParentsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a parent for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdParentsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationParentRequest message = default(UpdateOrganisationParentRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdParentsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available relations for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            public static void OrganisationsByOrganisationIdRelationsGet(this IOrganisationRegistryAPI operations, System.Guid organisationId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdRelationsGetAsync(organisationId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available relations for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationsByOrganisationIdRelationsGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationsByOrganisationIdRelationsGetWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a relation for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdRelationsPost(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationRelationRequest message = default(AddOrganisationRelationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdRelationsPostAsync(organisationId, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a relation for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdRelationsPostAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, AddOrganisationRelationRequest message = default(AddOrganisationRelationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdRelationsPostWithHttpMessagesAsync(organisationId, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a relation for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationsByOrganisationIdRelationsByIdGet(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdRelationsByIdGetAsync(organisationId, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a relation for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdRelationsByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdRelationsByIdGetWithHttpMessagesAsync(organisationId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a relation for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationsByOrganisationIdRelationsByIdPut(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationRelationRequest message = default(UpdateOrganisationRelationRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationsByOrganisationIdRelationsByIdPutAsync(organisationId, id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a relation for an organisation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationsByOrganisationIdRelationsByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid organisationId, string id, UpdateOrganisationRelationRequest message = default(UpdateOrganisationRelationRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationsByOrganisationIdRelationsByIdPutWithHttpMessagesAsync(organisationId, id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available organisation relation types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void OrganisationrelationtypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationrelationtypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available organisation relation types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task OrganisationrelationtypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.OrganisationrelationtypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create an organisation relation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationrelationtypesPost(this IOrganisationRegistryAPI operations, CreateOrganisationRelationTypeRequest message = default(CreateOrganisationRelationTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationrelationtypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an organisation relation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationrelationtypesPostAsync(this IOrganisationRegistryAPI operations, CreateOrganisationRelationTypeRequest message = default(CreateOrganisationRelationTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationrelationtypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an organisation relation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object OrganisationrelationtypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationrelationtypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an organisation relation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationrelationtypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationrelationtypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an organisation relation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object OrganisationrelationtypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateOrganisationRelationTypeRequest message = default(UpdateOrganisationRelationTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).OrganisationrelationtypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an organisation relation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OrganisationrelationtypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateOrganisationRelationTypeRequest message = default(UpdateOrganisationRelationTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OrganisationrelationtypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available people.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PeopleGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PeopleGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available people.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PeopleGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PeopleGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object PeoplePost(this IOrganisationRegistryAPI operations, CreatePersonRequest message = default(CreatePersonRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PeoplePostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PeoplePostAsync(this IOrganisationRegistryAPI operations, CreatePersonRequest message = default(CreatePersonRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PeoplePostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object PeopleByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PeopleByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PeopleByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PeopleByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object PeopleByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdatePersonRequest message = default(UpdatePersonRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PeopleByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PeopleByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdatePersonRequest message = default(UpdatePersonRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PeopleByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available capacities for a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// </param>
            public static void PeopleByPersonIdCapacitiesGet(this IOrganisationRegistryAPI operations, System.Guid personId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PeopleByPersonIdCapacitiesGetAsync(personId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available capacities for a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PeopleByPersonIdCapacitiesGetAsync(this IOrganisationRegistryAPI operations, System.Guid personId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PeopleByPersonIdCapacitiesGetWithHttpMessagesAsync(personId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a list of available functions for a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// </param>
            public static void PeopleByPersonIdFunctionsGet(this IOrganisationRegistryAPI operations, System.Guid personId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PeopleByPersonIdFunctionsGetAsync(personId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available functions for a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PeopleByPersonIdFunctionsGetAsync(this IOrganisationRegistryAPI operations, System.Guid personId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PeopleByPersonIdFunctionsGetWithHttpMessagesAsync(personId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a list of available mandates for a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// </param>
            public static void PeopleByPersonIdMandatesGet(this IOrganisationRegistryAPI operations, System.Guid personId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PeopleByPersonIdMandatesGetAsync(personId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available mandates for a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PeopleByPersonIdMandatesGetAsync(this IOrganisationRegistryAPI operations, System.Guid personId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PeopleByPersonIdMandatesGetWithHttpMessagesAsync(personId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a list of projections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static System.Collections.Generic.IList<string> ProjectionsGet(this IOrganisationRegistryAPI operations, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ProjectionsGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of projections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> ProjectionsGetAsync(this IOrganisationRegistryAPI operations, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ProjectionsGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available projection states.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static System.Collections.Generic.IList<ProjectionStateItem> ProjectionsStatesGet(this IOrganisationRegistryAPI operations, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ProjectionsStatesGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available projection states.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<ProjectionStateItem>> ProjectionsStatesGetAsync(this IOrganisationRegistryAPI operations, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ProjectionsStatesGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a projection state by its id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static ProjectionStateItem ProjectionsStatesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ProjectionsStatesByIdGetAsync(id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a projection state by its id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ProjectionStateItem> ProjectionsStatesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ProjectionsStatesByIdGetWithHttpMessagesAsync(id, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object ProjectionsStatesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateProjectionStateRequest message = default(UpdateProjectionStateRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ProjectionsStatesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ProjectionsStatesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateProjectionStateRequest message = default(UpdateProjectionStateRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ProjectionsStatesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the max event number.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static int? ProjectionsStatesLastEventGet(this IOrganisationRegistryAPI operations, string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).ProjectionsStatesLastEventGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the max event number.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<int?> ProjectionsStatesLastEventGetAsync(this IOrganisationRegistryAPI operations, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ProjectionsStatesLastEventGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available purposes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PurposesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PurposesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available purposes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PurposesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PurposesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a purpose.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object PurposesPost(this IOrganisationRegistryAPI operations, CreatePurposeRequest message = default(CreatePurposeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PurposesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a purpose.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PurposesPostAsync(this IOrganisationRegistryAPI operations, CreatePurposeRequest message = default(CreatePurposeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PurposesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a purpose.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object PurposesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PurposesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a purpose.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PurposesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PurposesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a purpose.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object PurposesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdatePurposeRequest message = default(UpdatePurposeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).PurposesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a purpose.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> PurposesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdatePurposeRequest message = default(UpdatePurposeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PurposesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// Elasticsearch index name
            /// </param>
            /// <param name='q'>
            /// Elasticsearch querystring search.
            /// </param>
            /// <param name='offset'>
            /// Elasticsearch starting index position.
            /// </param>
            /// <param name='limit'>
            /// Elasticsearch number of hits to return.
            /// </param>
            /// <param name='fields'>
            /// Elasticsearch source filter.
            /// </param>
            /// <param name='sort'>
            /// Elasticsearch sorting.
            /// </param>
            /// <param name='scroll'>
            /// Enable Elasticsearch scrolling.
            /// </param>
            public static System.Collections.Generic.IList<OrganisationDocument> SearchByIndexNameGet(this IOrganisationRegistryAPI operations, string indexName, string q = default(string), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SearchByIndexNameGetAsync(indexName, q, offset, limit, fields, sort, scroll), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// Elasticsearch index name
            /// </param>
            /// <param name='q'>
            /// Elasticsearch querystring search.
            /// </param>
            /// <param name='offset'>
            /// Elasticsearch starting index position.
            /// </param>
            /// <param name='limit'>
            /// Elasticsearch number of hits to return.
            /// </param>
            /// <param name='fields'>
            /// Elasticsearch source filter.
            /// </param>
            /// <param name='sort'>
            /// Elasticsearch sorting.
            /// </param>
            /// <param name='scroll'>
            /// Enable Elasticsearch scrolling.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrganisationDocument>> SearchByIndexNameGetAsync(this IOrganisationRegistryAPI operations, string indexName, string q = default(string), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SearchByIndexNameGetWithHttpMessagesAsync(indexName, q, offset, limit, fields, sort, scroll, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// </param>
            /// <param name='q'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            /// <param name='scroll'>
            /// </param>
            public static System.Collections.Generic.IList<OrganisationDocument> SearchByIndexNamePost(this IOrganisationRegistryAPI operations, string indexName, object q = default(object), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SearchByIndexNamePostAsync(indexName, q, offset, limit, fields, sort, scroll), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// </param>
            /// <param name='q'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            /// <param name='scroll'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrganisationDocument>> SearchByIndexNamePostAsync(this IOrganisationRegistryAPI operations, string indexName, object q = default(object), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SearchByIndexNamePostWithHttpMessagesAsync(indexName, q, offset, limit, fields, sort, scroll, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// Elasticsearch index name
            /// </param>
            /// <param name='q'>
            /// Elasticsearch querystring search.
            /// </param>
            /// <param name='offset'>
            /// Elasticsearch starting index position.
            /// </param>
            /// <param name='limit'>
            /// Elasticsearch number of hits to return.
            /// </param>
            /// <param name='fields'>
            /// Elasticsearch source filter.
            /// </param>
            /// <param name='sort'>
            /// Elasticsearch sorting.
            /// </param>
            /// <param name='scroll'>
            /// Enable Elasticsearch scrolling.
            /// </param>
            public static System.Collections.Generic.IList<OrganisationDocument> SearchBoxByIndexNameGet(this IOrganisationRegistryAPI operations, string indexName, string q = default(string), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SearchBoxByIndexNameGetAsync(indexName, q, offset, limit, fields, sort, scroll), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// Elasticsearch index name
            /// </param>
            /// <param name='q'>
            /// Elasticsearch querystring search.
            /// </param>
            /// <param name='offset'>
            /// Elasticsearch starting index position.
            /// </param>
            /// <param name='limit'>
            /// Elasticsearch number of hits to return.
            /// </param>
            /// <param name='fields'>
            /// Elasticsearch source filter.
            /// </param>
            /// <param name='sort'>
            /// Elasticsearch sorting.
            /// </param>
            /// <param name='scroll'>
            /// Enable Elasticsearch scrolling.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrganisationDocument>> SearchBoxByIndexNameGetAsync(this IOrganisationRegistryAPI operations, string indexName, string q = default(string), int? offset = default(int?), int? limit = default(int?), string fields = default(string), string sort = default(string), bool? scroll = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SearchBoxByIndexNameGetWithHttpMessagesAsync(indexName, q, offset, limit, fields, sort, scroll, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// Elasticsearch index name
            /// </param>
            /// <param name='id'>
            /// Elasticsearch scroll id.
            /// </param>
            public static System.Collections.Generic.IList<OrganisationDocument> SearchByIndexNameScrollGet(this IOrganisationRegistryAPI operations, string indexName, string id = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SearchByIndexNameScrollGetAsync(indexName, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search all organisations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// Elasticsearch index name
            /// </param>
            /// <param name='id'>
            /// Elasticsearch scroll id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrganisationDocument>> SearchByIndexNameScrollGetAsync(this IOrganisationRegistryAPI operations, string indexName, string id = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SearchByIndexNameScrollGetWithHttpMessagesAsync(indexName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of available seat types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void SeattypesGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SeattypesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of available seat types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task SeattypesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.SeattypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a seat type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object SeattypesPost(this IOrganisationRegistryAPI operations, CreateSeatTypeRequest message = default(CreateSeatTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SeattypesPostAsync(message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a seat type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> SeattypesPostAsync(this IOrganisationRegistryAPI operations, CreateSeatTypeRequest message = default(CreateSeatTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SeattypesPostWithHttpMessagesAsync(message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a seat type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object SeattypesByIdGet(this IOrganisationRegistryAPI operations, System.Guid id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SeattypesByIdGetAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a seat type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> SeattypesByIdGetAsync(this IOrganisationRegistryAPI operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SeattypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a seat type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object SeattypesByIdPut(this IOrganisationRegistryAPI operations, System.Guid id, UpdateSeatTypeRequest message = default(UpdateSeatTypeRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SeattypesByIdPutAsync(id, message, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a seat type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> SeattypesByIdPutAsync(this IOrganisationRegistryAPI operations, System.Guid id, UpdateSeatTypeRequest message = default(UpdateSeatTypeRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SeattypesByIdPutWithHttpMessagesAsync(id, message, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static void SecurityGet(this IOrganisationRegistryAPI operations, string authorization = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).SecurityGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task SecurityGetAsync(this IOrganisationRegistryAPI operations, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.SecurityGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void StatusGet(this IOrganisationRegistryAPI operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).StatusGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task StatusGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.StatusGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='daysBack'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static void StatusExceptionsGet(this IOrganisationRegistryAPI operations, int? daysBack = default(int?), string authorization = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).StatusExceptionsGetAsync(daysBack, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='daysBack'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task StatusExceptionsGetAsync(this IOrganisationRegistryAPI operations, int? daysBack = default(int?), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.StatusExceptionsGetWithHttpMessagesAsync(daysBack, authorization, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TogglesConfiguration StatusTogglesGet(this IOrganisationRegistryAPI operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).StatusTogglesGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TogglesConfiguration> StatusTogglesGetAsync(this IOrganisationRegistryAPI operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StatusTogglesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='daysBack'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static void StatusStatsGet(this IOrganisationRegistryAPI operations, int? daysBack = default(int?), string authorization = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).StatusStatsGetAsync(daysBack, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='daysBack'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task StatusStatsGetAsync(this IOrganisationRegistryAPI operations, int? daysBack = default(int?), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.StatusStatsGetWithHttpMessagesAsync(daysBack, authorization, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static void StatusConfigurationGet(this IOrganisationRegistryAPI operations, string authorization = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).StatusConfigurationGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task StatusConfigurationGetAsync(this IOrganisationRegistryAPI operations, string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.StatusConfigurationGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Executes a task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='task'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            public static object TasksPost(this IOrganisationRegistryAPI operations, TaskRequest task = default(TaskRequest), string authorization = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IOrganisationRegistryAPI)s).TasksPostAsync(task, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Executes a task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='task'>
            /// </param>
            /// <param name='authorization'>
            /// bearer token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> TasksPostAsync(this IOrganisationRegistryAPI operations, TaskRequest task = default(TaskRequest), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.TasksPostWithHttpMessagesAsync(task, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
