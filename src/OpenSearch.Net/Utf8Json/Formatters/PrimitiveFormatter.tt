<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#
	var types = new[]
	{
		typeof(sbyte),
		typeof(short),
		typeof(int),
		typeof(long),
		typeof(byte), 
		typeof(ushort),
		typeof(uint),
		typeof(ulong),
		typeof(float),
		typeof(double),
		typeof(bool), 
	};
#>
/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
* 	http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/

#region Utf8Json License https://github.com/neuecc/Utf8Json/blob/master/LICENSE
// MIT License
// 
// Copyright (c) 2017 Yoshifumi Kawai
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

using System;
using OpenSearch.Net.Utf8Json.Internal;

namespace OpenSearch.Net.Utf8Json.Formatters
{
<# foreach(var t in types) {  #>
	internal sealed class <#= t.Name #>Formatter : IJsonFormatter<<#= GetCSharpType(t) #>>, IObjectPropertyNameFormatter<<#= GetCSharpType(t) #>>
	{
		public static readonly <#= t.Name #>Formatter Default = new <#= t.Name #>Formatter();

		public void Serialize(ref JsonWriter writer, <#= GetCSharpType(t) #> value, IJsonFormatterResolver formatterResolver) => writer.Write<#= t.Name #>(value);

		public <#= GetCSharpType(t) #> Deserialize(ref JsonReader reader, IJsonFormatterResolver formatterResolver) => reader.Read<#= t.Name #>();

		public void SerializeToPropertyName(ref JsonWriter writer, <#= GetCSharpType(t) #> value, IJsonFormatterResolver formatterResolver)
		{
			writer.WriteQuotation();
			writer.Write<#= t.Name #>(value);
			writer.WriteQuotation();
		}

		public <#= GetCSharpType(t) #> DeserializeFromPropertyName(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
		{
			var key = reader.ReadStringSegmentRaw();
			return NumberConverter.Read<#= t.Name #>(key.Array, key.Offset, out _);
		}
	}

	internal sealed class Nullable<#= t.Name #>Formatter : IJsonFormatter<<#= GetCSharpType(t) #>?>, IObjectPropertyNameFormatter<<#= GetCSharpType(t) #>?>
	{
		public static readonly Nullable<#= t.Name #>Formatter Default = new Nullable<#= t.Name #>Formatter();

		public void Serialize(ref JsonWriter writer, <#= GetCSharpType(t) #>? value, IJsonFormatterResolver formatterResolver)
		{
			if (value == null)
				writer.WriteNull();
			else
				writer.Write<#= t.Name #>(value.Value);
		}

		public <#= GetCSharpType(t) #>? Deserialize(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
		{
			if (reader.ReadIsNull())
				return null;

			return reader.Read<#= t.Name #>();
		}

		public void SerializeToPropertyName(ref JsonWriter writer, <#= GetCSharpType(t) #>? value, IJsonFormatterResolver formatterResolver)
		{
			if (value == null) { writer.WriteNull(); return; }

			writer.WriteQuotation();
			writer.Write<#= t.Name #>(value.Value);
			writer.WriteQuotation();
		}

		public <#= GetCSharpType(t) #>? DeserializeFromPropertyName(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
		{
			if (reader.ReadIsNull()) return null;

			var key = reader.ReadStringSegmentRaw();
			return NumberConverter.Read<#= t.Name #>(key.Array, key.Offset, out _);
		}
	}

<# if(t.Name != "Byte") { #>
	internal sealed class <#= t.Name #>ArrayFormatter : IJsonFormatter<<#= GetCSharpType(t) #>[]>
	{
		public static readonly <#= t.Name #>ArrayFormatter Default = new <#= t.Name #>ArrayFormatter();

		public void Serialize(ref JsonWriter writer, <#= GetCSharpType(t) #>[] value, IJsonFormatterResolver formatterResolver)
		{
			if (value == null)
				writer.WriteNull();
			else
			{
				writer.WriteBeginArray();

				if (value.Length != 0)
					writer.Write<#= t.Name #>(value[0]);
				for (var i = 1; i < value.Length; i++)
				{
					writer.WriteValueSeparator();
					writer.Write<#= t.Name #>(value[i]);
				}

				writer.WriteEndArray();
			}
		}

		public <#= GetCSharpType(t) #>[] Deserialize(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
		{
			if (reader.ReadIsNull())
				return null;

			reader.ReadIsBeginArrayWithVerify();
			var array = new <#= GetCSharpType(t) #>[4];
			var count = 0;
			while (!reader.ReadIsEndArrayWithSkipValueSeparator(ref count))
			{
				if (array.Length < count)
					Array.Resize(ref array, count * 2);

				array[count - 1] = reader.Read<#= t.Name #>();
			}

			Array.Resize(ref array, count);
			return array;
		}
	}
<# } #>

<# } #>
}
<#+
	public static string GetCSharpType(Type type)
	{
		switch (type.Name)
		{
			case "SByte": return "sbyte";
			case "Int16": return "short";
			case "Int32": return "int";
			case "Int64": return "long";
			case "Byte": return "byte";
			case "UInt16": return "ushort";
			case "UInt32": return "uint";
			case "UInt64": return "ulong";
			case "Single": return "float";
			case "Double": return "double";
			case "Boolean": return "bool";
			default: throw new Exception("Unknown type");
		}
	}
#>