/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
* 	http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using OpenSearch.Net.Utf8Json;

namespace Osc
{
	/// <summary>
	/// A multi-value metrics aggregation that computes statistics over string values extracted from the aggregated documents.
	/// These values can be retrieved either from specific keyword fields in the documents or can be generated by a provided script.
	/// </summary>
	[InterfaceDataContract]
	[ReadAs(typeof(StringStatsAggregation))]
	public interface IStringStatsAggregation : IAggregation
	{
		/// <summary>
		/// The field to perform the aggregation on
		/// </summary>
		[DataMember(Name = "field")]
		Field Field { get; set; }

		/// <summary>
		/// A value to use for documents missing a value for the field
		/// </summary>
		[DataMember(Name = "missing")]
		object Missing { get; set; }

		/// <summary>
		/// Compute the string stats based on a script
		/// </summary>
		[DataMember(Name = "script")]
		IScript Script { get; set; }

		/// <summary>
		/// Include the probability distribution for all characters in the response.
		/// </summary>
		[DataMember(Name = "show_distribution")]
		bool? ShowDistribution { get; set; }
	}

	/// <inheritdoc cref="IStringStatsAggregation"/>
	public class StringStatsAggregation : AggregationBase, IStringStatsAggregation
	{
		internal StringStatsAggregation() { }

		public StringStatsAggregation(string name, Field field) : base(name) => Field = field;

		internal override void WrapInContainer(AggregationContainer c) => c.StringStats = this;

		/// <inheritdoc />
		public Field Field { get; set; }

		/// <inheritdoc />
		public object Missing { get; set; }

		/// <inheritdoc />
		public IScript Script { get; set; }

		/// <inheritdoc />
		public bool? ShowDistribution { get; set; }
	}

	/// <inheritdoc cref="IStringStatsAggregation"/>
	public class StringStatsAggregationDescriptor<T>
		: DescriptorBase<StringStatsAggregationDescriptor<T>, IStringStatsAggregation>, IStringStatsAggregation
		where T : class
	{
		Field IStringStatsAggregation.Field { get; set; }
		IDictionary<string, object> IAggregation.Meta { get; set; }
		object IStringStatsAggregation.Missing { get; set; }
		string IAggregation.Name { get; set; }

		IScript IStringStatsAggregation.Script { get; set; }

		bool? IStringStatsAggregation.ShowDistribution { get; set; }

		/// <inheritdoc cref="IStringStatsAggregation.Field"/>
		public StringStatsAggregationDescriptor<T> Field(Field field) => Assign(field, (a, v) => a.Field = v);

		/// <inheritdoc cref="IStringStatsAggregation.Field"/>
		public StringStatsAggregationDescriptor<T> Field<TValue>(Expression<Func<T, TValue>> field) => Assign(field, (a, v) => a.Field = v);

		/// <inheritdoc cref="IStringStatsAggregation.Script"/>
		public StringStatsAggregationDescriptor<T> Script(string script) => Assign((InlineScript)script, (a, v) => a.Script = v);

		/// <inheritdoc cref="IStringStatsAggregation.Script"/>
		public StringStatsAggregationDescriptor<T> Script(Func<ScriptDescriptor, IScript> scriptSelector) =>
			Assign(scriptSelector, (a, v) => a.Script = v?.Invoke(new ScriptDescriptor()));

		/// <inheritdoc cref="IStringStatsAggregation.Missing"/>
		public StringStatsAggregationDescriptor<T> Missing(object missing) => Assign(missing, (a, v) => a.Missing = v);

		/// <inheritdoc cref="IAggregation.Meta"/>
		public StringStatsAggregationDescriptor<T> Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector) =>
			Assign(selector, (a, v) => a.Meta = v?.Invoke(new FluentDictionary<string, object>()));

		/// <inheritdoc cref="IStringStatsAggregation.ShowDistribution"/>
		public StringStatsAggregationDescriptor<T> ShowDistribution(bool? showDistribution = true) =>
		Assign(showDistribution, (a, v) => a.ShowDistribution = v);
	}
}
