{
  "swagger": "2.0",
  "info": {
    "version": "",
    "title": "OrganisationRegistry API",
    "description": "OrganisationRegistry API - Digitaal Vlaanderen"
  },
  "basePath": "/",
  "paths": {
    "/bodies": {
      "get": {
        "tags": [ "Body" ],
        "summary": "Get a list of available bodies.",
        "operationId": "BodiesGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml", "text/csv" ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/BodyListQueryResult" }
            }
          }
        }
      },
      "post": {
        "tags": [ "Body" ],
        "summary": "Register a body.",
        "operationId": "BodiesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/RegisterBodyRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the body is registered, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the body information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{id}": {
      "get": {
        "tags": [ "Body" ],
        "summary": "Get a body.",
        "operationId": "BodiesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the body is found.",
            "schema": { "$ref": "#/definitions/BodyResponse" }
          },
          "404": {
            "description": "If the body cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/contacts": {
      "get": {
        "tags": [ "BodyContact" ],
        "summary": "Get a list of available contacts for a body.",
        "operationId": "BodiesByBodyIdContactsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "BodyContact" ],
        "summary": "Create a contact for an organisation.",
        "operationId": "BodiesByBodyIdContactsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddBodyContactRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the contact is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the contact information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/contacts/{id}": {
      "get": {
        "tags": [ "BodyContact" ],
        "summary": "Get a contact for a body.",
        "operationId": "BodiesByBodyIdContactsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the contact is found.",
            "schema": { "$ref": "#/definitions/BodyContactListItem" }
          },
          "404": {
            "description": "If the contact cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "BodyContact" ],
        "summary": "Update a contact for an organisation.",
        "operationId": "BodiesByBodyIdContactsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBodyContactRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the contact information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the contact is updated, together with the location." }
        }
      }
    },
    "/bodies/{bodyId}/formalframeworks": {
      "get": {
        "tags": [ "BodyFormalFramework" ],
        "summary": "Get a list of available formal frameworks for a body.",
        "operationId": "BodiesByBodyIdFormalframeworksGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "BodyFormalFramework" ],
        "summary": "Create a formal framework for a body.",
        "operationId": "BodiesByBodyIdFormalframeworksPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddBodyFormalFrameworkRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the formal framework is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the formal framework information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/formalframeworks/{id}": {
      "get": {
        "tags": [ "BodyFormalFramework" ],
        "summary": "Get a formal framework for a body.",
        "operationId": "BodiesByBodyIdFormalframeworksByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the formal framework is found.",
            "schema": { "$ref": "#/definitions/BodyFormalFrameworkListItem" }
          },
          "404": {
            "description": "If the formal framework cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "BodyFormalFramework" ],
        "summary": "Update a formal framework for a body.",
        "operationId": "BodiesByBodyIdFormalframeworksByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBodyFormalFrameworkRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the formal framework information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the formal framework is updated, together with the location." }
        }
      }
    },
    "/bodies/{id}/info": {
      "get": {
        "tags": [ "BodyInfo" ],
        "summary": "Get a body's information.",
        "operationId": "BodiesByIdInfoGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the body is found.",
            "schema": { "$ref": "#/definitions/BodyInfoResponse" }
          },
          "404": {
            "description": "If the body cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "BodyInfo" ],
        "summary": "Update a body's info.",
        "operationId": "BodiesByIdInfoPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBodyInfoRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the body info is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the body information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/lifecyclephases": {
      "get": {
        "tags": [ "BodyLifecyclePhase" ],
        "summary": "Get a list of available lifecycle phases for a body.",
        "operationId": "BodiesByBodyIdLifecyclephasesGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "BodyLifecyclePhase" ],
        "summary": "Create a lifecycle phase for a body.",
        "operationId": "BodiesByBodyIdLifecyclephasesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddBodyLifecyclePhaseRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the lifecycle phase is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the lifecycle phase information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/lifecyclephases/{id}": {
      "get": {
        "tags": [ "BodyLifecyclePhase" ],
        "summary": "Get a lifecycle phase for a body.",
        "operationId": "BodiesByBodyIdLifecyclephasesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the lifecycle phase is found.",
            "schema": { "$ref": "#/definitions/BodyLifecyclePhaseListItem" }
          },
          "404": {
            "description": "If the lifecycle phase cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "BodyLifecyclePhase" ],
        "summary": "Update a lifecycle phase for a body.",
        "operationId": "BodiesByBodyIdLifecyclephasesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBodyLifecyclePhaseRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the lifecycle phase information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the lifecycle phase is updated, together with the location." }
        }
      }
    },
    "/bodies/{bodyId}/mandates": {
      "get": {
        "tags": [ "BodyMandate" ],
        "summary": "Get a list of available mandates for a body.",
        "operationId": "BodiesByBodyIdMandatesGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "BodyMandate" ],
        "summary": "Create a mandate for a body.",
        "operationId": "BodiesByBodyIdMandatesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddBodyMandateRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the mandate is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the mandate information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/mandates/{id}": {
      "get": {
        "tags": [ "BodyMandate" ],
        "summary": "Get a mandate for a body.",
        "operationId": "BodiesByBodyIdMandatesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the mandate is found.",
            "schema": { "$ref": "#/definitions/BodyMandateResponse" }
          },
          "404": {
            "description": "If the mandate cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "BodyMandate" ],
        "summary": "Update a mandate for a body.",
        "operationId": "BodiesByBodyIdMandatesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBodyMandateRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the mandate information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the mandate is updated, together with the location." }
        }
      }
    },
    "/bodies/{bodyId}/organisations": {
      "get": {
        "tags": [ "BodyOrganisation" ],
        "summary": "Get a list of available organisations for a body.",
        "operationId": "BodiesByBodyIdOrganisationsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "BodyOrganisation" ],
        "summary": "Link an organisation to a body.",
        "operationId": "BodiesByBodyIdOrganisationsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddBodyOrganisationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the organisation is linked, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the organisation information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/organisations/{id}": {
      "get": {
        "tags": [ "BodyOrganisation" ],
        "summary": "Get an organisation for a body.",
        "operationId": "BodiesByBodyIdOrganisationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation is found.",
            "schema": { "$ref": "#/definitions/BodyOrganisationListItem" }
          },
          "404": {
            "description": "If the organisation cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "BodyOrganisation" ],
        "summary": "Update an organisation for a body.",
        "operationId": "BodiesByBodyIdOrganisationsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBodyOrganisationRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the organisation information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the organisation is updated, together with the location." }
        }
      }
    },
    "/reports/bodyparticipation/{bodyId}": {
      "get": {
        "tags": [ "BodyParticipationReport" ],
        "summary": "Get gender ratio for a body (grouped by body and bodyseat)",
        "operationId": "ReportsBodyparticipationByBodyIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "description": "A body GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/BodyParticipation" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/bodyparticipation/{bodyId}/totals": {
      "get": {
        "tags": [ "BodyParticipationReport" ],
        "summary": "Get gender ratio totals for a body (grouped by body)",
        "operationId": "ReportsBodyparticipationByBodyIdTotalsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "description": "A body GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/BodyParticipationTotals" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/seats": {
      "get": {
        "tags": [ "BodySeat" ],
        "summary": "Get a list of available seats for a body.",
        "operationId": "BodiesByBodyIdSeatsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "BodySeat" ],
        "summary": "Create a seat for a body.",
        "operationId": "BodiesByBodyIdSeatsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddBodySeatRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the seat is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the seat information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/bodies/{bodyId}/seats/{id}": {
      "get": {
        "tags": [ "BodySeat" ],
        "summary": "Get a seat for a body.",
        "operationId": "BodiesByBodyIdSeatsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the seat is found.",
            "schema": { "$ref": "#/definitions/BodySeatListItem" }
          },
          "404": {
            "description": "If the seat cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "BodySeat" ],
        "summary": "Update a seat for a body.",
        "operationId": "BodiesByBodyIdSeatsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBodySeatRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the seat information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the seat is updated, together with the location." }
        }
      }
    },
    "/bodies/{id}/validity": {
      "get": {
        "tags": [ "BodyValidity" ],
        "summary": "Get a body's validity.",
        "operationId": "BodiesByIdValidityGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the body is found.",
            "schema": { "$ref": "#/definitions/BodyValidityResponse" }
          },
          "404": {
            "description": "If the body cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "BodyValidity" ],
        "summary": "Update a body's validity.",
        "operationId": "BodiesByIdValidityPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBodyValidityRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the body validity is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the body validity information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/buildings": {
      "get": {
        "tags": [ "Building" ],
        "summary": "Get a list of available buildings.",
        "operationId": "BuildingsGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "Building" ],
        "summary": "Create a building.",
        "operationId": "BuildingsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateBuildingRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the building is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the building information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/buildings/{id}": {
      "get": {
        "tags": [ "Building" ],
        "summary": "Get a building.",
        "operationId": "BuildingsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the building is found.",
            "schema": { "$ref": "#/definitions/BuildingListItem" }
          },
          "404": {
            "description": "If the building cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "Building" ],
        "summary": "Update a building.",
        "operationId": "BuildingsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateBuildingRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the building is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the building information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/buildingorganisations/{id}": {
      "get": {
        "tags": [ "BuildingOrganisationReport" ],
        "summary": "Get all organisations for a formal framework.",
        "operationId": "ReportsBuildingorganisationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A formal framework GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/BuildingOrganisation" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/capacities": {
      "get": {
        "tags": [ "Capacity" ],
        "summary": "Get a list of available capacities.",
        "operationId": "CapacitiesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "Capacity" ],
        "summary": "Create a capacity.",
        "operationId": "CapacitiesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateCapacityRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the capacity is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the capacity information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/capacities/{id}": {
      "get": {
        "tags": [ "Capacity" ],
        "summary": "Get a capacity.",
        "operationId": "CapacitiesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the capacity is found.",
            "schema": { "$ref": "#/definitions/CapacityListItem" }
          },
          "404": {
            "description": "If the capacity cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "Capacity" ],
        "summary": "Update a capacity.",
        "operationId": "CapacitiesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateCapacityRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the capacity is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the capacity information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/capacitypersons/{id}": {
      "get": {
        "tags": [ "CapacityPersonReport" ],
        "summary": "Get all persons for a capacity.",
        "operationId": "ReportsCapacitypersonsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A capacity GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/CapacityPerson" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/configuration": {
      "get": {
        "tags": [ "Configuration" ],
        "summary": "Get a list of available configuration values.",
        "operationId": "ConfigurationGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "Configuration" ],
        "summary": "Create a configuration value.",
        "operationId": "ConfigurationPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateConfigurationValueRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the configuration value is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the configuration value does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/configuration/{id}": {
      "get": {
        "tags": [ "Configuration" ],
        "summary": "Get a configuration value.",
        "operationId": "ConfigurationByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the configuration value is found.",
            "schema": { "$ref": "#/definitions/ConfigurationValue" }
          },
          "404": {
            "description": "If the configuration value cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "Configuration" ],
        "summary": "Update a configuration value.",
        "operationId": "ConfigurationByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateConfigurationValueRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the configuration value is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the configuration value does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/contacttypes": {
      "get": {
        "tags": [ "ContactType" ],
        "summary": "Get a list of available contact types.",
        "operationId": "ContacttypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "ContactType" ],
        "summary": "Create a contact type.",
        "operationId": "ContacttypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateContactTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the contact type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the contact type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/contacttypes/{id}": {
      "get": {
        "tags": [ "ContactType" ],
        "summary": "Get a contact type.",
        "operationId": "ContacttypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the contact type is found.",
            "schema": { "$ref": "#/definitions/ContactTypeListItem" }
          },
          "404": {
            "description": "If the contact type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "ContactType" ],
        "summary": "Update a contact type.",
        "operationId": "ContacttypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateContactTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the contact type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the contact type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/manage/delegations": {
      "get": {
        "tags": [ "Delegation" ],
        "summary": "Get a list of available delegations.",
        "operationId": "ManageDelegationsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml", "text/csv" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/DelegationListQueryResult" }
            }
          }
        }
      }
    },
    "/manage/delegations/{id}": {
      "get": {
        "tags": [ "Delegation" ],
        "summary": "Get a delegation.",
        "operationId": "ManageDelegationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the delegation is found.",
            "schema": { "$ref": "#/definitions/DelegationResponse" }
          },
          "404": {
            "description": "If the delegation cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      }
    },
    "/manage/delegations/{delegationId}/assignments": {
      "get": {
        "tags": [ "DelegationAssignment" ],
        "summary": "Get a list of available delegation assignments.",
        "operationId": "ManageDelegationsByDelegationIdAssignmentsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml", "text/csv" ],
        "parameters": [
          {
            "name": "delegationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/DelegationAssignmentListQueryResult" }
            }
          }
        }
      },
      "post": {
        "tags": [ "DelegationAssignment" ],
        "summary": "Create a delegation assignment for an organisation.",
        "operationId": "ManageDelegationsByDelegationIdAssignmentsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "delegationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddDelegationAssignmentRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the delegation assignment is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the delegation assignment information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/manage/delegations/{delegationId}/assignments/{id}": {
      "get": {
        "tags": [ "DelegationAssignment" ],
        "summary": "Get a delegation assignment.",
        "operationId": "ManageDelegationsByDelegationIdAssignmentsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "delegationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the delegation assignment is found.",
            "schema": { "$ref": "#/definitions/DelegationAssignmentListQueryResult" }
          },
          "404": {
            "description": "If the delegation assignment cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "DelegationAssignment" ],
        "summary": "Update a delegation assignment.",
        "operationId": "ManageDelegationsByDelegationIdAssignmentsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "delegationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateDelegationAssignmentRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the delegation assignment is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the delegation assignment information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/manage/delegations/{delegationId}/assignments/{delegationAssignmentId}/{bodyId}/{bodySeatId}": {
      "delete": {
        "tags": [ "DelegationAssignment" ],
        "summary": "Remove a delegation assignment.",
        "operationId": "ManageDelegationsByDelegationIdAssignmentsByDelegationAssignmentIdByBodyIdByBodySeatIdDelete",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "delegationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "delegationAssignmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bodyId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bodySeatId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the delegation assignment is removed, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the delegation assignment information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/dumps/agentschap-zorg-en-gezondheid/full": {
      "get": {
        "tags": [ "Dump" ],
        "summary": "Get all organisations.",
        "operationId": "DumpsAgentschap-zorg-en-gezondheidFullGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/OrganisationDump" }
            }
          }
        }
      }
    },
    "/dumps/agentschap-zorg-en-gezondheid/full.{format}": {
      "get": {
        "tags": [ "Dump" ],
        "summary": "Get all organisations.",
        "operationId": "DumpsAgentschap-zorg-en-gezondheidFull.{formatGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/OrganisationDump" }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [ "Empty" ],
        "operationId": "Get",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/events": {
      "get": {
        "tags": [ "Events" ],
        "summary": "Get a list of events.",
        "operationId": "EventsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml", "text/csv" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/EventListItem" }
            }
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [ "Events" ],
        "summary": "Get an event.",
        "operationId": "EventsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the event is found.",
            "schema": { "$ref": "#/definitions/EventWithData" }
          },
          "404": {
            "description": "If the event cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      }
    },
    "/formalframeworks": {
      "get": {
        "tags": [ "FormalFramework" ],
        "summary": "Get a list of available formal frameworks.",
        "operationId": "FormalframeworksGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "FormalFramework" ],
        "summary": "Create a formal framework.",
        "operationId": "FormalframeworksPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateFormalFrameworkRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the formal framework is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the formal framework information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/formalframeworks/vademecum": {
      "get": {
        "tags": [ "FormalFramework" ],
        "summary": "Get a list of available formal frameworks for vademecum report.",
        "operationId": "FormalframeworksVademecumGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/formalframeworks/{id}": {
      "get": {
        "tags": [ "FormalFramework" ],
        "summary": "Get a formal framework.",
        "operationId": "FormalframeworksByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the formal framework is found.",
            "schema": { "$ref": "#/definitions/FormalFrameworkListItem" }
          },
          "404": {
            "description": "If the formal framework cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "FormalFramework" ],
        "summary": "Update a formal framework.",
        "operationId": "FormalframeworksByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateFormalFrameworkRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the formal framework is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the formal framework information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/formalframeworkbodies/{id}": {
      "get": {
        "tags": [ "FormalFrameworkBodyReport" ],
        "summary": "Get all bodies for a formal framework.",
        "operationId": "ReportsFormalframeworkbodiesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A formal framework GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/FormalFrameworkBody" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/formalframeworkcategories": {
      "get": {
        "tags": [ "FormalFrameworkCategory" ],
        "summary": "Get a list of available formal framework categories.",
        "operationId": "FormalframeworkcategoriesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "FormalFrameworkCategory" ],
        "summary": "Create a formal framework category.",
        "operationId": "FormalframeworkcategoriesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateFormalFrameworkCategoryRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the formal framework category is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the formal framework category information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/formalframeworkcategories/{id}": {
      "get": {
        "tags": [ "FormalFrameworkCategory" ],
        "summary": "Get a formal framework category.",
        "operationId": "FormalframeworkcategoriesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the formal framework category is found.",
            "schema": { "$ref": "#/definitions/FormalFrameworkCategoryListItem" }
          },
          "404": {
            "description": "If the formal framework category cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "FormalFrameworkCategory" ],
        "summary": "Update a formal framework category.",
        "operationId": "FormalframeworkcategoriesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateFormalFrameworkCategoryRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the formal framework category is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the formal framework category information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/formalframeworkorganisations/{id}": {
      "get": {
        "tags": [ "FormalFrameworkOrganisationReport" ],
        "summary": "Get all organisations for a formal framework.",
        "operationId": "ReportsFormalframeworkorganisationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A formal framework GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/FormalFrameworkOrganisationBase" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/formalframeworkorganisations/{id}/extended": {
      "get": {
        "tags": [ "FormalFrameworkOrganisationReport" ],
        "summary": "Get all organisations for a formal framework.",
        "operationId": "ReportsFormalframeworkorganisationsByIdExtendedGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A formal framework GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/FormalFrameworkOrganisationExtended" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/formalframeworkorganisations/vademecum/{id}": {
      "get": {
        "tags": [ "FormalFrameworkOrganisationReport" ],
        "summary": "Get all organisations for a formal framework.",
        "operationId": "ReportsFormalframeworkorganisationsVademecumByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A formal framework GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/FormalFrameworkOrganisation" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/formalframeworkparticipation/{formalFrameworkId}": {
      "get": {
        "tags": [ "FormalFrameworkParticipationReport" ],
        "summary": "Get gender ratio for a formalframework (grouped by body, organisation and bodyseat)",
        "operationId": "ReportsFormalframeworkparticipationByFormalFrameworkIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "formalFrameworkId",
            "in": "path",
            "description": "A formal framework GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/FormalFrameworkParticipation" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/functiontypes": {
      "get": {
        "tags": [ "FunctionType" ],
        "summary": "Get a list of available function types.",
        "operationId": "FunctiontypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "FunctionType" ],
        "summary": "Create a function type.",
        "operationId": "FunctiontypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateFunctionTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the function type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the function type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/functiontypes/{id}": {
      "get": {
        "tags": [ "FunctionType" ],
        "summary": "Get a function type.",
        "operationId": "FunctiontypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the function type is found.",
            "schema": { "$ref": "#/definitions/FunctionTypeListItem" }
          },
          "404": {
            "description": "If the function type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "FunctionType" ],
        "summary": "Update a function type.",
        "operationId": "FunctiontypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateFunctionTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the function type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the function type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/keytypes": {
      "get": {
        "tags": [ "KeyType" ],
        "summary": "Get a list of available key types.",
        "operationId": "KeytypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "KeyType" ],
        "summary": "Create a key type.",
        "operationId": "KeytypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateKeyTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the key type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the key type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/keytypes/{id}": {
      "get": {
        "tags": [ "KeyType" ],
        "summary": "Get a key type.",
        "operationId": "KeytypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the key type is found.",
            "schema": { "$ref": "#/definitions/KeyTypeListItem" }
          },
          "404": {
            "description": "If the key type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "KeyType" ],
        "summary": "Update a key type.",
        "operationId": "KeytypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateKeyTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the key type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the key type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/labeltypes": {
      "get": {
        "tags": [ "LabelType" ],
        "summary": "Get a list of available label types.",
        "operationId": "LabeltypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "LabelType" ],
        "summary": "Create a label type.",
        "operationId": "LabeltypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateLabelTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the label type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the label type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/labeltypes/{id}": {
      "get": {
        "tags": [ "LabelType" ],
        "summary": "Get a label type.",
        "operationId": "LabeltypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the label type is found.",
            "schema": { "$ref": "#/definitions/LabelTypeListItem" }
          },
          "404": {
            "description": "If the label type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "LabelType" ],
        "summary": "Update a label type.",
        "operationId": "LabeltypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateLabelTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the label type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the label type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/lifecyclephasetypes": {
      "get": {
        "tags": [ "LifecyclePhaseType" ],
        "summary": "Get a list of available lifecyclephase types.",
        "operationId": "LifecyclephasetypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "LifecyclePhaseType" ],
        "summary": "Create a lifecyclephase type.",
        "operationId": "LifecyclephasetypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateLifecyclePhaseTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the lifecyclephase type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the lifecyclephase type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/lifecyclephasetypes/{id}": {
      "get": {
        "tags": [ "LifecyclePhaseType" ],
        "summary": "Get a lifecyclephase type.",
        "operationId": "LifecyclephasetypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the lifecyclephase type is found.",
            "schema": { "$ref": "#/definitions/LifecyclePhaseTypeListItem" }
          },
          "404": {
            "description": "If the lifecyclephase type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "LifecyclePhaseType" ],
        "summary": "Update a lifecyclephase type.",
        "operationId": "LifecyclephasetypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateLifecyclePhaseTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the lifecyclephase type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the lifecyclephase type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [ "Location" ],
        "summary": "Get a list of available location types.",
        "operationId": "LocationsGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "Location" ],
        "summary": "Create a location.",
        "operationId": "LocationsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateLocationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the location is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the location information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/locations/{id}": {
      "get": {
        "tags": [ "Location" ],
        "summary": "Get a location type.",
        "operationId": "LocationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the location type is found.",
            "schema": { "$ref": "#/definitions/LocationResponse" }
          },
          "404": {
            "description": "If the location type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "Location" ],
        "summary": "Update a location.",
        "operationId": "LocationsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateLocationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the location is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the location information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/locationtypes": {
      "get": {
        "tags": [ "LocationType" ],
        "summary": "Get a list of available location types.",
        "operationId": "LocationtypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "LocationType" ],
        "summary": "Create a location type.",
        "operationId": "LocationtypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateLocationTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the location type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the location type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/locationtypes/{id}": {
      "get": {
        "tags": [ "LocationType" ],
        "summary": "Get a location type.",
        "operationId": "LocationtypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the location type is found.",
            "schema": { "$ref": "#/definitions/LocationTypeListItem" }
          },
          "404": {
            "description": "If the location type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "LocationType" ],
        "summary": "Update a location type.",
        "operationId": "LocationtypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateLocationTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the location type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the location type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/mandateroletypes": {
      "get": {
        "tags": [ "MandateRoleType" ],
        "summary": "Get a list of available mandate role types.",
        "operationId": "MandateroletypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "MandateRoleType" ],
        "summary": "Create a mandate role type.",
        "operationId": "MandateroletypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateMandateRoleTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the mandate role type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the mandate role type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/mandateroletypes/{id}": {
      "get": {
        "tags": [ "MandateRoleType" ],
        "summary": "Get a mandate role type.",
        "operationId": "MandateroletypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the mandate role type is found.",
            "schema": { "$ref": "#/definitions/MandateRoleTypeListItem" }
          },
          "404": {
            "description": "If the mandate role type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "MandateRoleType" ],
        "summary": "Update a mandate role type.",
        "operationId": "MandateroletypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateMandateRoleTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the mandate role type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the mandate role type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations": {
      "get": {
        "tags": [ "Organisation" ],
        "summary": "Get a list of available organisations.",
        "operationId": "OrganisationsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml", "text/csv" ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/OrganisationListQueryResult" }
            }
          }
        }
      },
      "post": {
        "tags": [ "Organisation" ],
        "summary": "Create an organisation.",
        "operationId": "OrganisationsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateOrganisationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the organisation is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the organisation information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{id}": {
      "get": {
        "tags": [ "Organisation" ],
        "summary": "Get an organisation.",
        "operationId": "OrganisationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation is found.",
            "schema": { "$ref": "#/definitions/OrganisationResponse" }
          },
          "404": {
            "description": "If the organisation cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "Organisation" ],
        "summary": "Update an organisation.",
        "operationId": "OrganisationsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationInfoRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the organisation information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/bankAccounts": {
      "get": {
        "tags": [ "OrganisationBankAccount" ],
        "summary": "Get a list of available bankAccounts for an organisation.",
        "operationId": "OrganisationsByOrganisationIdBankAccountsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationBankAccount" ],
        "summary": "Add a bankAccount to an organisation.",
        "operationId": "OrganisationsByOrganisationIdBankAccountsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationBankAccountRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the bankAccount is added, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the bankAccount information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/bankAccounts/{id}": {
      "get": {
        "tags": [ "OrganisationBankAccount" ],
        "summary": "Get a bankAccount for an organisation.",
        "operationId": "OrganisationsByOrganisationIdBankAccountsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the bankAccount is found.",
            "schema": { "$ref": "#/definitions/OrganisationBankAccountListItem" }
          },
          "404": {
            "description": "If the bankAccount cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationBankAccount" ],
        "summary": "Update a bankAccount for an organisation.",
        "operationId": "OrganisationsByOrganisationIdBankAccountsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationBankAccountRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the bankAccount information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the bankAccount is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/bodies": {
      "get": {
        "tags": [ "OrganisationBody" ],
        "summary": "Get a list of available bodies for an organisation.",
        "operationId": "OrganisationsByOrganisationIdBodiesGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/organisations/{organisationId}/buildings": {
      "get": {
        "tags": [ "OrganisationBuilding" ],
        "summary": "Get a list of available buildings for an organisation.",
        "operationId": "OrganisationsByOrganisationIdBuildingsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationBuilding" ],
        "summary": "Add a building to an organisation.",
        "operationId": "OrganisationsByOrganisationIdBuildingsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationBuildingRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the building is added, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the building information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/buildings/{id}": {
      "get": {
        "tags": [ "OrganisationBuilding" ],
        "summary": "Get a building for an organisation.",
        "operationId": "OrganisationsByOrganisationIdBuildingsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the building is found.",
            "schema": { "$ref": "#/definitions/OrganisationBuildingListItem" }
          },
          "404": {
            "description": "If the building cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationBuilding" ],
        "summary": "Update a building for an organisation.",
        "operationId": "OrganisationsByOrganisationIdBuildingsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationBuildingRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the building information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the building is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/capacities": {
      "get": {
        "tags": [ "OrganisationCapacity" ],
        "summary": "Get a list of available capacities for an organisation.",
        "operationId": "OrganisationsByOrganisationIdCapacitiesGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationCapacity" ],
        "summary": "Create a capacity for an organisation.",
        "operationId": "OrganisationsByOrganisationIdCapacitiesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationCapacityRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the capacity is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the capacity information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/capacities/{id}": {
      "get": {
        "tags": [ "OrganisationCapacity" ],
        "summary": "Get a capacity for an organisation.",
        "operationId": "OrganisationsByOrganisationIdCapacitiesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the capacity is found.",
            "schema": { "$ref": "#/definitions/OrganisationCapacityResponse" }
          },
          "404": {
            "description": "If the capacity cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationCapacity" ],
        "summary": "Update a capacity for an organisation.",
        "operationId": "OrganisationsByOrganisationIdCapacitiesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationCapacityRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the capacity information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the capacity is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/children": {
      "get": {
        "tags": [ "OrganisationChildren" ],
        "summary": "Get a list of available children for an organisation.",
        "operationId": "OrganisationsByOrganisationIdChildrenGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/organisationclassifications": {
      "get": {
        "tags": [ "OrganisationClassification" ],
        "summary": "Get a list of available organisation classifications.",
        "operationId": "OrganisationclassificationsGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationClassification" ],
        "summary": "Create an organisation classification.",
        "operationId": "OrganisationclassificationsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateOrganisationClassificationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the organisation classificiation is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the organisation classificiation information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisationclassifications/{id}": {
      "get": {
        "tags": [ "OrganisationClassification" ],
        "summary": "Get an organisation classification.",
        "operationId": "OrganisationclassificationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation classification is found.",
            "schema": { "$ref": "#/definitions/OrganisationClassificationListItem" }
          },
          "404": {
            "description": "If the organisation classification cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationClassification" ],
        "summary": "Update an organisation classification.",
        "operationId": "OrganisationclassificationsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationClassificationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation classification is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the organisation classification information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/classificationorganisations/{id}": {
      "get": {
        "tags": [ "OrganisationClassificationReport" ],
        "summary": "Get all organisations and their labels for a classification of classificationtype \"Beleidsdomein\".",
        "operationId": "ReportsClassificationorganisationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ClassificationOrganisation" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/policydomainclassifications": {
      "get": {
        "tags": [ "OrganisationClassificationReport" ],
        "summary": "Get all classifications for classificationtype \"Beleidsdomein\".",
        "operationId": "ReportsPolicydomainclassificationsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PagedQueryable[OrganisationClassificationListQueryResult]" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/responsibleministerclassifications": {
      "get": {
        "tags": [ "OrganisationClassificationReport" ],
        "summary": "Get all classifications for classificationtype \"Bevoegde minister\".",
        "operationId": "ReportsResponsibleministerclassificationsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PagedQueryable[OrganisationClassificationListQueryResult]" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/reports/classificationorganisationsparticipation/{classificationOrganisationId}": {
      "get": {
        "tags": [ "OrganisationClassificationReport" ],
        "summary": "Get gender ratio for a classification organisation (grouped by body)",
        "operationId": "ReportsClassificationorganisationsparticipationByClassificationOrganisationIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "classificationOrganisationId",
            "in": "path",
            "description": "A classification organisation GUID identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ClassificationOrganisationParticipation" }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisationclassificationtypes": {
      "get": {
        "tags": [ "OrganisationClassificationType" ],
        "summary": "Get a list of available organisation classification types.",
        "operationId": "OrganisationclassificationtypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationClassificationType" ],
        "summary": "Create an organisation classification type.",
        "operationId": "OrganisationclassificationtypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateOrganisationClassificationTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the organisation classificiation type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the organisation classificiation type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisationclassificationtypes/{id}": {
      "get": {
        "tags": [ "OrganisationClassificationType" ],
        "summary": "Get an organisation classificication type.",
        "operationId": "OrganisationclassificationtypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation classification type is found.",
            "schema": { "$ref": "#/definitions/OrganisationClassificationTypeListItem" }
          },
          "404": {
            "description": "If the organisation classificiation type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationClassificationType" ],
        "summary": "Update an organisation classification type.",
        "operationId": "OrganisationclassificationtypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationClassificationTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation classification type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the organisation classification type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/contacts": {
      "get": {
        "tags": [ "OrganisationContact" ],
        "summary": "Get a list of available contacts for an organisation.",
        "operationId": "OrganisationsByOrganisationIdContactsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationContact" ],
        "summary": "Create a contact for an organisation.",
        "operationId": "OrganisationsByOrganisationIdContactsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationContactRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the contact is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the contact information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/contacts/{id}": {
      "get": {
        "tags": [ "OrganisationContact" ],
        "summary": "Get a contact for an organisation.",
        "operationId": "OrganisationsByOrganisationIdContactsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the contact is found.",
            "schema": { "$ref": "#/definitions/OrganisationContactListItem" }
          },
          "404": {
            "description": "If the contact cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationContact" ],
        "summary": "Update a contact for an organisation.",
        "operationId": "OrganisationsByOrganisationIdContactsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationContactRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the contact information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the contact is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/formalframeworks": {
      "get": {
        "tags": [ "OrganisationFormalFramework" ],
        "summary": "Get a list of available formal frameworks for an organisation.",
        "operationId": "OrganisationsByOrganisationIdFormalframeworksGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationFormalFramework" ],
        "summary": "Create a formal framework for an organisation.",
        "operationId": "OrganisationsByOrganisationIdFormalframeworksPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationFormalFrameworkRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the formal framework is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the formal framework information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/formalframeworks/{id}": {
      "get": {
        "tags": [ "OrganisationFormalFramework" ],
        "summary": "Get a formal framework for an organisation.",
        "operationId": "OrganisationsByOrganisationIdFormalframeworksByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the formal framework is found.",
            "schema": { "$ref": "#/definitions/OrganisationFormalFrameworkListItem" }
          },
          "404": {
            "description": "If the formal framework cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationFormalFramework" ],
        "summary": "Update a formal framework for an organisation.",
        "operationId": "OrganisationsByOrganisationIdFormalframeworksByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationFormalFrameworkRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the formal framework information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the formal framework is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/functions": {
      "get": {
        "tags": [ "OrganisationFunction" ],
        "summary": "Get a list of available functions for an organisation.",
        "operationId": "OrganisationsByOrganisationIdFunctionsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationFunction" ],
        "summary": "Create a function for an organisation.",
        "operationId": "OrganisationsByOrganisationIdFunctionsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationFunctionRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the function is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the function information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/functions/{id}": {
      "get": {
        "tags": [ "OrganisationFunction" ],
        "summary": "Get a function for an organisation.",
        "operationId": "OrganisationsByOrganisationIdFunctionsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the function is found.",
            "schema": { "$ref": "#/definitions/OrganisationFunctionResponse" }
          },
          "404": {
            "description": "If the function cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationFunction" ],
        "summary": "Update a function for an organisation.",
        "operationId": "OrganisationsByOrganisationIdFunctionsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationFunctionRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the function information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the function is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/keys": {
      "get": {
        "tags": [ "OrganisationKey" ],
        "summary": "Get a list of available keys for an organisation.",
        "operationId": "OrganisationsByOrganisationIdKeysGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationKey" ],
        "summary": "Create a key for an organisation.",
        "operationId": "OrganisationsByOrganisationIdKeysPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationKeyRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the key is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the key information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/keys/{id}": {
      "get": {
        "tags": [ "OrganisationKey" ],
        "summary": "Get a key for an organisation.",
        "operationId": "OrganisationsByOrganisationIdKeysByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the key is found.",
            "schema": { "$ref": "#/definitions/OrganisationKeyListItem" }
          },
          "404": {
            "description": "If the key cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationKey" ],
        "summary": "Update a key for an organisation.",
        "operationId": "OrganisationsByOrganisationIdKeysByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationKeyRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the key information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the key is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/labels": {
      "get": {
        "tags": [ "OrganisationLabel" ],
        "summary": "Get a list of available labels for an organisation.",
        "operationId": "OrganisationsByOrganisationIdLabelsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationLabel" ],
        "summary": "Create a label for an organisation.",
        "operationId": "OrganisationsByOrganisationIdLabelsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationLabelRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the label is created, together with the label.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the label information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/labels/{id}": {
      "get": {
        "tags": [ "OrganisationLabel" ],
        "summary": "Get a label for an organisation.",
        "operationId": "OrganisationsByOrganisationIdLabelsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the label is found.",
            "schema": { "$ref": "#/definitions/OrganisationLabelListItem" }
          },
          "404": {
            "description": "If the label cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationLabel" ],
        "summary": "Update a label for an organisation.",
        "operationId": "OrganisationsByOrganisationIdLabelsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationLabelRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the label information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the label is updated, together with the label." }
        }
      }
    },
    "/organisations/{organisationId}/locations": {
      "get": {
        "tags": [ "OrganisationLocation" ],
        "summary": "Get a list of available locations for an organisation.",
        "operationId": "OrganisationsByOrganisationIdLocationsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationLocation" ],
        "summary": "Add a location to an organisation.",
        "operationId": "OrganisationsByOrganisationIdLocationsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationLocationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the location is added, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the location information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/locations/{id}": {
      "get": {
        "tags": [ "OrganisationLocation" ],
        "summary": "Get a location for an organisation.",
        "operationId": "OrganisationsByOrganisationIdLocationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the location is found.",
            "schema": { "$ref": "#/definitions/OrganisationLocationListItem" }
          },
          "404": {
            "description": "If the location cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationLocation" ],
        "summary": "Update a location for an organisation.",
        "operationId": "OrganisationsByOrganisationIdLocationsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationLocationRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the location information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the location is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/classifications": {
      "get": {
        "tags": [ "OrganisationOrganisationClassification" ],
        "summary": "Get a list of available classifications for an organisation.",
        "operationId": "OrganisationsByOrganisationIdClassificationsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationOrganisationClassification" ],
        "summary": "Create a classification for an organisation.",
        "operationId": "OrganisationsByOrganisationIdClassificationsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationOrganisationClassificationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the classification is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the classification information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/classifications/{id}": {
      "get": {
        "tags": [ "OrganisationOrganisationClassification" ],
        "summary": "Get a classification for an organisation.",
        "operationId": "OrganisationsByOrganisationIdClassificationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the classification is found.",
            "schema": { "$ref": "#/definitions/OrganisationOrganisationClassificationListItem" }
          },
          "404": {
            "description": "If the classification cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationOrganisationClassification" ],
        "summary": "Update a classification for an organisation.",
        "operationId": "OrganisationsByOrganisationIdClassificationsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationOrganisationClassificationRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the classification information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the classification is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/parents": {
      "get": {
        "tags": [ "OrganisationParent" ],
        "summary": "Get a list of available parents for an organisation.",
        "operationId": "OrganisationsByOrganisationIdParentsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationParent" ],
        "summary": "Create a parent for an organisation.",
        "operationId": "OrganisationsByOrganisationIdParentsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationParentRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the parent is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the parent information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/parents/{id}": {
      "get": {
        "tags": [ "OrganisationParent" ],
        "summary": "Get a parent for an organisation.",
        "operationId": "OrganisationsByOrganisationIdParentsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the parent is found.",
            "schema": { "$ref": "#/definitions/OrganisationParentListItem" }
          },
          "404": {
            "description": "If the parent cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationParent" ],
        "summary": "Update a parent for an organisation.",
        "operationId": "OrganisationsByOrganisationIdParentsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationParentRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the parent information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the parent is updated, together with the location." }
        }
      }
    },
    "/organisations/{organisationId}/relations": {
      "get": {
        "tags": [ "OrganisationRelation" ],
        "summary": "Get a list of available relations for an organisation.",
        "operationId": "OrganisationsByOrganisationIdRelationsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationRelation" ],
        "summary": "Create a relation for an organisation.",
        "operationId": "OrganisationsByOrganisationIdRelationsPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AddOrganisationRelationRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the relation is created.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the relation information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisations/{organisationId}/relations/{id}": {
      "get": {
        "tags": [ "OrganisationRelation" ],
        "summary": "Get a relation for an organisation.",
        "operationId": "OrganisationsByOrganisationIdRelationsByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the relation is found.",
            "schema": { "$ref": "#/definitions/OrganisationRelationResponse" }
          },
          "404": {
            "description": "If the relation cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationRelation" ],
        "summary": "Update a relation for an organisation.",
        "operationId": "OrganisationsByOrganisationIdRelationsByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationRelationRequest" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the relation information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          },
          "201": { "description": "If the relation is updated." }
        }
      }
    },
    "/organisationrelationtypes": {
      "get": {
        "tags": [ "OrganisationRelationType" ],
        "summary": "Get a list of available organisation relation types.",
        "operationId": "OrganisationrelationtypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "OrganisationRelationType" ],
        "summary": "Create an organisation relation type.",
        "operationId": "OrganisationrelationtypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateOrganisationRelationTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the organisation relation type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the organisation relation type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/organisationrelationtypes/{id}": {
      "get": {
        "tags": [ "OrganisationRelationType" ],
        "summary": "Get an organisation relation type.",
        "operationId": "OrganisationrelationtypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation relation type is found.",
            "schema": { "$ref": "#/definitions/OrganisationRelationTypeListItem" }
          },
          "404": {
            "description": "If the organisation relation type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "OrganisationRelationType" ],
        "summary": "Update an organisation relation type.",
        "operationId": "OrganisationrelationtypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateOrganisationRelationTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the organisation relation type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the organisation relation type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/people": {
      "get": {
        "tags": [ "Person" ],
        "summary": "Get a list of available people.",
        "operationId": "PeopleGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "Person" ],
        "summary": "Create a person.",
        "operationId": "PeoplePost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreatePersonRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the person is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the person information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/people/{id}": {
      "get": {
        "tags": [ "Person" ],
        "summary": "Get a person.",
        "operationId": "PeopleByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the person is found.",
            "schema": { "$ref": "#/definitions/PersonListItem" }
          },
          "404": {
            "description": "If the person cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "Person" ],
        "summary": "Update a person.",
        "operationId": "PeopleByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdatePersonRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the person is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the person information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/people/{personId}/capacities": {
      "get": {
        "tags": [ "PersonCapacity" ],
        "summary": "Get a list of available capacities for a person.",
        "operationId": "PeopleByPersonIdCapacitiesGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/people/{personId}/functions": {
      "get": {
        "tags": [ "PersonFunction" ],
        "summary": "Get a list of available functions for a person.",
        "operationId": "PeopleByPersonIdFunctionsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/people/{personId}/mandates": {
      "get": {
        "tags": [ "PersonMandate" ],
        "summary": "Get a list of available mandates for a person.",
        "operationId": "PeopleByPersonIdMandatesGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/projections": {
      "get": {
        "tags": [ "Projections" ],
        "summary": "Get a list of projections.",
        "operationId": "ProjectionsGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml", "text/csv" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "type": "string" }
            }
          }
        }
      }
    },
    "/projections/states": {
      "get": {
        "tags": [ "Projections" ],
        "summary": "Get a list of available projection states.",
        "operationId": "ProjectionsStatesGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ProjectionStateItem" }
            }
          }
        }
      }
    },
    "/projections/states/{id}": {
      "get": {
        "tags": [ "Projections" ],
        "summary": "Get a projection state by its id.",
        "operationId": "ProjectionsStatesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ProjectionStateItem" }
          }
        }
      },
      "put": {
        "tags": [ "Projections" ],
        "operationId": "ProjectionsStatesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateProjectionStateRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/projections/states/last-event": {
      "get": {
        "tags": [ "Projections" ],
        "summary": "Get the max event number.",
        "operationId": "ProjectionsStatesLast-eventGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      }
    },
    "/purposes": {
      "get": {
        "tags": [ "Purpose" ],
        "summary": "Get a list of available purposes.",
        "operationId": "PurposesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "Purpose" ],
        "summary": "Create a purpose.",
        "operationId": "PurposesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreatePurposeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the purpose is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the purpose information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/purposes/{id}": {
      "get": {
        "tags": [ "Purpose" ],
        "summary": "Get a purpose.",
        "operationId": "PurposesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the purpose is found.",
            "schema": { "$ref": "#/definitions/PurposeListItem" }
          },
          "404": {
            "description": "If the purpose cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "Purpose" ],
        "summary": "Update a purpose.",
        "operationId": "PurposesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdatePurposeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the purpose is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the purpose information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/search/{indexName}": {
      "get": {
        "tags": [ "Search" ],
        "summary": "Search all organisations.",
        "operationId": "SearchByIndexNameGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Elasticsearch index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Elasticsearch querystring search.",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Elasticsearch starting index position.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Elasticsearch number of hits to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Elasticsearch source filter.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Elasticsearch sorting.",
            "required": false,
            "type": "string"
          },
          {
            "name": "scroll",
            "in": "query",
            "description": "Enable Elasticsearch scrolling.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/OrganisationDocument" }
            }
          }
        }
      },
      "post": {
        "tags": [ "Search" ],
        "summary": "Search all organisations.",
        "operationId": "SearchByIndexNamePost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "body",
            "required": false,
            "schema": { "type": "object" }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scroll",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/OrganisationDocument" }
            }
          }
        }
      }
    },
    "/search/box/{indexName}": {
      "get": {
        "tags": [ "Search" ],
        "summary": "Search all organisations.",
        "operationId": "SearchBoxByIndexNameGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Elasticsearch index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Elasticsearch querystring search.",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Elasticsearch starting index position.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Elasticsearch number of hits to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Elasticsearch source filter.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Elasticsearch sorting.",
            "required": false,
            "type": "string"
          },
          {
            "name": "scroll",
            "in": "query",
            "description": "Enable Elasticsearch scrolling.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/OrganisationDocument" }
            }
          }
        }
      }
    },
    "/search/{indexName}/scroll": {
      "get": {
        "tags": [ "Search" ],
        "summary": "Search all organisations.",
        "operationId": "SearchByIndexNameScrollGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Elasticsearch index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Elasticsearch scroll id.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/OrganisationDocument" }
            }
          }
        }
      }
    },
    "/seattypes": {
      "get": {
        "tags": [ "SeatType" ],
        "summary": "Get a list of available seat types.",
        "operationId": "SeattypesGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "tags": [ "SeatType" ],
        "summary": "Create a seat type.",
        "operationId": "SeattypesPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateSeatTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "If the seat type is created, together with the location.",
            "schema": { "$ref": "#/definitions/CreatedResult" }
          },
          "400": {
            "description": "If the seat type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/seattypes/{id}": {
      "get": {
        "tags": [ "SeatType" ],
        "summary": "Get a seat type.",
        "operationId": "SeattypesByIdGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "If the seat type is found.",
            "schema": { "$ref": "#/definitions/SeatTypeListItem" }
          },
          "404": {
            "description": "If the seat type cannot be found.",
            "schema": { "$ref": "#/definitions/NotFoundResult" }
          }
        }
      },
      "put": {
        "tags": [ "SeatType" ],
        "summary": "Update a seat type.",
        "operationId": "SeattypesByIdPut",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateSeatTypeRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the seat type is updated, together with the location.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the seat type information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    },
    "/security": {
      "get": {
        "tags": [ "Security" ],
        "operationId": "SecurityGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/status": {
      "get": {
        "tags": [ "Status" ],
        "operationId": "StatusGet",
        "consumes": [],
        "produces": [],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/status/exceptions": {
      "get": {
        "tags": [ "Status" ],
        "operationId": "StatusExceptionsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "daysBack",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/status/toggles": {
      "get": {
        "tags": [ "Status" ],
        "operationId": "StatusTogglesGet",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json", "application/xml", "text/xml" ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/TogglesConfiguration" }
          }
        }
      }
    },
    "/status/stats": {
      "get": {
        "tags": [ "Status" ],
        "operationId": "StatusStatsGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "daysBack",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/status/configuration": {
      "get": {
        "tags": [ "Status" ],
        "operationId": "StatusConfigurationGet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/tasks": {
      "post": {
        "tags": [ "Task" ],
        "summary": "Executes a task.",
        "operationId": "TasksPost",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "task",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/TaskRequest" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "bearer token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the task was performed.",
            "schema": { "$ref": "#/definitions/OkResult" }
          },
          "400": {
            "description": "If the task information does not pass validation.",
            "schema": { "$ref": "#/definitions/BadRequestResult" }
          }
        }
      }
    }
  },
  "definitions": {
    "BodyListQueryResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "bodyNumber": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "shortName": {
          "type": "string",
          "readOnly": true
        },
        "organisationId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "organisation": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RegisterBodyRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "bodyNumber": { "type": "string" },
        "shortName": { "type": "string" },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "description": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        },
        "formalValidFrom": {
          "format": "date-time",
          "type": "string"
        },
        "formalValidTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CreatedResult": {
      "type": "object",
      "properties": {
        "location": { "type": "string" },
        "value": { "type": "object" },
        "formatters": {
          "type": "array",
          "items": { "$ref": "#/definitions/IOutputFormatter" }
        },
        "contentTypes": {
          "type": "array",
          "items": { "type": "string" }
        },
        "declaredType": { "type": "string" },
        "statusCode": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "IOutputFormatter": {
      "type": "object",
      "properties": {}
    },
    "BadRequestResult": {
      "type": "object",
      "properties": {
        "statusCode": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "BodyResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "bodyNumber": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "shortName": {
          "type": "string",
          "readOnly": true
        },
        "organisation": {
          "type": "string",
          "readOnly": true
        },
        "organisationId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "formalValidFrom": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "formalValidTo": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "lifecycleValid": {
          "type": "boolean",
          "readOnly": true
        },
        "hasAllSeatsAssigned": {
          "type": "boolean",
          "readOnly": true
        },
        "isMepCompliant": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "NotFoundResult": {
      "type": "object",
      "properties": {
        "statusCode": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "AddBodyContactRequest": {
      "type": "object",
      "properties": {
        "bodyContactId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "contactValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodyContactListItem": {
      "type": "object",
      "properties": {
        "bodyContactId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeName": { "type": "string" },
        "contactValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateBodyContactRequest": {
      "type": "object",
      "properties": {
        "bodyContactId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "contactValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OkResult": {
      "type": "object",
      "properties": {
        "statusCode": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "AddBodyFormalFrameworkRequest": {
      "type": "object",
      "properties": {
        "bodyFormalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodyFormalFrameworkListItem": {
      "type": "object",
      "properties": {
        "bodyFormalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkName": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateBodyFormalFrameworkRequest": {
      "type": "object",
      "properties": {
        "bodyFormalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodyInfoResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "bodyNumber": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "shortName": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "UpdateBodyInfoRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "shortName": { "type": "string" },
        "description": { "type": "string" }
      }
    },
    "AddBodyLifecyclePhaseRequest": {
      "type": "object",
      "properties": {
        "bodyLifecyclePhaseId": {
          "format": "uuid",
          "type": "string"
        },
        "lifecyclePhaseTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodyLifecyclePhaseListItem": {
      "type": "object",
      "properties": {
        "bodyLifecyclePhaseId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "lifecyclePhaseTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "lifecyclePhaseTypeName": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        },
        "hasAdjacentGaps": { "type": "boolean" }
      }
    },
    "UpdateBodyLifecyclePhaseRequest": {
      "type": "object",
      "properties": {
        "bodyLifecyclePhaseId": {
          "format": "uuid",
          "type": "string"
        },
        "lifecyclePhaseTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddBodyMandateRequest": {
      "type": "object",
      "properties": {
        "bodyMandateId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyMandateType": {
          "enum": [ "person", "functionType", "organisation" ],
          "type": "string"
        },
        "delegatorId": {
          "format": "uuid",
          "type": "string"
        },
        "delegatedId": {
          "format": "uuid",
          "type": "string"
        },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodyMandateResponse": {
      "type": "object",
      "properties": {
        "bodyMandateId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyMandateType": {
          "enum": [ "person", "functionType", "organisation" ],
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatNumber": { "type": "string" },
        "bodySeatName": { "type": "string" },
        "delegatorId": {
          "format": "uuid",
          "type": "string"
        },
        "delegatorName": { "type": "string" },
        "delegatedId": {
          "format": "uuid",
          "type": "string"
        },
        "delegatedName": { "type": "string" },
        "assignedToId": {
          "format": "uuid",
          "type": "string"
        },
        "assignedToName": { "type": "string" },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateBodyMandateRequest": {
      "type": "object",
      "properties": {
        "bodyMandateId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyMandateType": {
          "enum": [ "person", "functionType", "organisation" ],
          "type": "string"
        },
        "delegatorId": {
          "format": "uuid",
          "type": "string"
        },
        "delegatedId": {
          "format": "uuid",
          "type": "string"
        },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddBodyOrganisationRequest": {
      "type": "object",
      "properties": {
        "bodyOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodyOrganisationListItem": {
      "type": "object",
      "properties": {
        "bodyOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateBodyOrganisationRequest": {
      "type": "object",
      "properties": {
        "bodyOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodyParticipation": {
      "type": "object",
      "properties": {
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyName": { "type": "string" },
        "bodySeatTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatTypeName": { "type": "string" },
        "malePercentage": {
          "format": "double",
          "type": "number"
        },
        "femalePercentage": {
          "format": "double",
          "type": "number"
        },
        "unknownPercentage": {
          "format": "double",
          "type": "number"
        },
        "maleCount": {
          "format": "int32",
          "type": "integer"
        },
        "femaleCount": {
          "format": "int32",
          "type": "integer"
        },
        "unknownCount": {
          "format": "int32",
          "type": "integer"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "assignedCount": {
          "format": "int32",
          "type": "integer"
        },
        "unassignedCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "BodyParticipationTotals": {
      "type": "object",
      "properties": {
        "malePercentage": {
          "format": "double",
          "type": "number"
        },
        "femalePercentage": {
          "format": "double",
          "type": "number"
        },
        "unknownPercentage": {
          "format": "double",
          "type": "number"
        },
        "maleCount": {
          "format": "int32",
          "type": "integer"
        },
        "femaleCount": {
          "format": "int32",
          "type": "integer"
        },
        "unknownCount": {
          "format": "int32",
          "type": "integer"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "assignedCount": {
          "format": "int32",
          "type": "integer"
        },
        "unassignedCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AddBodySeatRequest": {
      "type": "object",
      "properties": {
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "paidSeat": { "type": "boolean" },
        "entitledToVote": { "type": "boolean" },
        "seatTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodySeatListItem": {
      "type": "object",
      "properties": {
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "bodySeatNumber": { "type": "string" },
        "paidSeat": { "type": "boolean" },
        "entitledToVote": { "type": "boolean" },
        "seatTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "seatTypeName": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateBodySeatRequest": {
      "type": "object",
      "properties": {
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "paidSeat": { "type": "boolean" },
        "entitledToVote": { "type": "boolean" },
        "seatTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BodyValidityResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "formalValidFrom": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "formalValidTo": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "UpdateBodyValidityRequest": {
      "type": "object",
      "properties": {
        "formalValidFrom": {
          "format": "date-time",
          "type": "string"
        },
        "formalValidTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CreateBuildingRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "vimId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "BuildingListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "vimId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UpdateBuildingRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "vimId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "BuildingOrganisation": {
      "type": "object",
      "properties": {
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" },
        "organisationShortName": { "type": "string" },
        "organisationOvoNumber": { "type": "string" },
        "dataVlaanderenOrganisationUri": { "type": "string" },
        "legalForm": { "type": "string" },
        "policyDomain": { "type": "string" },
        "responsibleMinister": { "type": "string" }
      }
    },
    "CreateCapacityRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "CapacityListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateCapacityRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "CapacityPerson": {
      "type": "object",
      "properties": {
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" },
        "organisationShortName": { "type": "string" },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "personName": { "type": "string" },
        "functionTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "functionTypeName": { "type": "string" },
        "email": { "type": "string" },
        "location": { "type": "string" },
        "phone": { "type": "string" },
        "cellPhone": { "type": "string" },
        "policyDomain": { "type": "string" }
      }
    },
    "CreateConfigurationValueRequest": {
      "type": "object",
      "properties": {
        "key": { "type": "string" },
        "description": { "type": "string" },
        "value": { "type": "string" }
      }
    },
    "ConfigurationValue": {
      "type": "object",
      "properties": {
        "key": { "type": "string" },
        "description": { "type": "string" },
        "value": { "type": "string" }
      }
    },
    "UpdateConfigurationValueRequest": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "value": { "type": "string" }
      }
    },
    "CreateContactTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "ContactTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateContactTypeRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "DelegationListQueryResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "organisationId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "organisationName": {
          "type": "string",
          "readOnly": true
        },
        "functionTypeId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "functionTypeName": {
          "type": "string",
          "readOnly": true
        },
        "bodyId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "bodyName": {
          "type": "string",
          "readOnly": true
        },
        "bodyOrganisationId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "bodyOrganisationName": {
          "type": "string",
          "readOnly": true
        },
        "bodySeatName": {
          "type": "string",
          "readOnly": true
        },
        "bodySeatNumber": {
          "type": "string",
          "readOnly": true
        },
        "isDelegated": {
          "type": "boolean",
          "readOnly": true
        },
        "validFrom": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "validTo": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DelegationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyName": { "type": "string" },
        "bodyOrganisationName": { "type": "string" },
        "organisationName": { "type": "string" },
        "functionTypeName": { "type": "string" },
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatNumber": { "type": "string" },
        "bodySeatName": { "type": "string" },
        "isDelegated": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "DelegationAssignmentListQueryResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "personId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "personName": {
          "type": "string",
          "readOnly": true
        },
        "validFrom": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "validTo": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AddDelegationAssignmentRequest": {
      "type": "object",
      "properties": {
        "delegationAssignmentId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateDelegationAssignmentRequest": {
      "type": "object",
      "properties": {
        "delegationAssignmentId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatId": {
          "format": "uuid",
          "type": "string"
        },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationDump": {
      "type": "object",
      "properties": {}
    },
    "EventListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "number": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "name": { "type": "string" },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "data": { "type": "string" },
        "ip": { "type": "string" },
        "lastName": { "type": "string" },
        "firstName": { "type": "string" },
        "userId": { "type": "string" }
      }
    },
    "EventWithData": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "number": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "version": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "timestamp": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "data": {
          "$ref": "#/definitions/IEvent",
          "readOnly": true
        },
        "ip": {
          "type": "string",
          "readOnly": true
        },
        "lastName": {
          "type": "string",
          "readOnly": true
        },
        "firstName": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IEvent": {
      "type": "object",
      "properties": {
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "CreateFormalFrameworkRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "code": { "type": "string" },
        "formalFrameworkCategoryId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "FormalFrameworkListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "code": { "type": "string" },
        "formalFrameworkCategoryId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkCategoryName": { "type": "string" }
      }
    },
    "UpdateFormalFrameworkRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "code": { "type": "string" },
        "formalFrameworkCategoryId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "FormalFrameworkBody": {
      "type": "object",
      "properties": {
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyName": { "type": "string" },
        "bodyShortName": { "type": "string" },
        "bodyNumber": { "type": "string" },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" }
      }
    },
    "CreateFormalFrameworkCategoryRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "FormalFrameworkCategoryListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateFormalFrameworkCategoryRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "FormalFrameworkOrganisationBase": {
      "type": "object",
      "properties": {
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" },
        "organisationShortName": { "type": "string" },
        "organisationOvoNumber": { "type": "string" },
        "dataVlaanderenOrganisationUri": { "type": "string" },
        "legalForm": { "type": "string" },
        "policyDomain": { "type": "string" },
        "responsibleMinister": { "type": "string" },
        "mainLocation": { "type": "string" },
        "location": { "type": "string" }
      }
    },
    "FormalFrameworkOrganisationExtended": {
      "type": "object",
      "properties": {
        "inr": { "type": "string" },
        "kbo": { "type": "string" },
        "orafin": { "type": "string" },
        "vlimpers": { "type": "string" },
        "vlimpersKort": { "type": "string" },
        "bestuursniveau": { "type": "string" },
        "categorie": { "type": "string" },
        "entiteitsvorm": { "type": "string" },
        "esrKlasseToezichthoudendeOverheid": { "type": "string" },
        "esrSector": { "type": "string" },
        "esrToezichthoudendeOverheid": { "type": "string" },
        "uitvoerendNiveau": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" },
        "organisationShortName": { "type": "string" },
        "organisationOvoNumber": { "type": "string" },
        "dataVlaanderenOrganisationUri": { "type": "string" },
        "legalForm": { "type": "string" },
        "policyDomain": { "type": "string" },
        "responsibleMinister": { "type": "string" },
        "mainLocation": { "type": "string" },
        "location": { "type": "string" }
      }
    },
    "FormalFrameworkOrganisation": {
      "type": "object",
      "properties": {}
    },
    "FormalFrameworkParticipation": {
      "type": "object",
      "properties": {
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyName": { "type": "string" },
        "bodySeatTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "bodySeatTypeName": { "type": "string" },
        "malePercentage": {
          "format": "double",
          "type": "number"
        },
        "femalePercentage": {
          "format": "double",
          "type": "number"
        },
        "unknownPercentage": {
          "format": "double",
          "type": "number"
        },
        "maleCount": {
          "format": "int32",
          "type": "integer"
        },
        "femaleCount": {
          "format": "int32",
          "type": "integer"
        },
        "unknownCount": {
          "format": "int32",
          "type": "integer"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "assignedCount": {
          "format": "int32",
          "type": "integer"
        },
        "unassignedCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CreateFunctionTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "FunctionTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateFunctionTypeRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "CreateKeyTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "KeyTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateKeyTypeRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "CreateLabelTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "LabelTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateLabelTypeRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "CreateLifecyclePhaseTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "representsActivePhase": { "type": "boolean" },
        "isDefaultPhase": { "type": "boolean" }
      }
    },
    "LifecyclePhaseTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "representsActivePhase": { "type": "boolean" },
        "isDefaultPhase": { "type": "boolean" }
      }
    },
    "UpdateLifecyclePhaseTypeRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "representsActivePhase": { "type": "boolean" },
        "isDefaultPhase": { "type": "boolean" }
      }
    },
    "CreateLocationRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "crabLocationId": { "type": "string" },
        "street": { "type": "string" },
        "zipCode": { "type": "string" },
        "city": { "type": "string" },
        "country": { "type": "string" }
      }
    },
    "LocationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "crabLocationId": { "type": "string" },
        "formattedAddress": { "type": "string" },
        "street": { "type": "string" },
        "zipCode": { "type": "string" },
        "city": { "type": "string" },
        "country": { "type": "string" }
      }
    },
    "UpdateLocationRequest": {
      "type": "object",
      "properties": {
        "crabLocationId": { "type": "string" },
        "street": { "type": "string" },
        "zipCode": { "type": "string" },
        "city": { "type": "string" },
        "country": { "type": "string" }
      }
    },
    "CreateLocationTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "LocationTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateLocationTypeRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "CreateMandateRoleTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "MandateRoleTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateMandateRoleTypeRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "OrganisationListQueryResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "ovoNumber": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "shortName": {
          "type": "string",
          "readOnly": true
        },
        "parentOrganisationOvoNumber": {
          "type": "string",
          "readOnly": true
        },
        "parentOrganisation": {
          "type": "string",
          "readOnly": true
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CreateOrganisationRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "ovoNumber": { "type": "string" },
        "shortName": { "type": "string" },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "purposeIds": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "showOnVlaamseOverheidSites": { "type": "boolean" },
        "description": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "ovoNumber": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "shortName": {
          "type": "string",
          "readOnly": true
        },
        "parentOrganisation": {
          "type": "string",
          "readOnly": true
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "formalFrameworkId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "organisationClassificationId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "organisationClassificationTypeId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "mainBuildingId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "mainBuildingName": {
          "type": "string",
          "readOnly": true
        },
        "mainLocationId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "mainLocationName": {
          "type": "string",
          "readOnly": true
        },
        "purposeIds": {
          "type": "array",
          "items": { "type": "string" },
          "readOnly": true
        },
        "purposes": {
          "type": "array",
          "items": { "type": "string" },
          "readOnly": true
        },
        "showOnVlaamseOverheidSites": {
          "type": "boolean",
          "readOnly": true
        },
        "validFrom": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "validTo": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "UpdateOrganisationInfoRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "description": { "type": "string" },
        "shortName": { "type": "string" },
        "purposeIds": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "showOnVlaamseOverheidSites": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationBankAccountRequest": {
      "type": "object",
      "properties": {
        "organisationBankAccountId": {
          "format": "uuid",
          "type": "string"
        },
        "bankAccountNumber": { "type": "string" },
        "isIban": { "type": "boolean" },
        "bic": { "type": "string" },
        "isBic": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationBankAccountListItem": {
      "type": "object",
      "properties": {
        "organisationBankAccountId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "bankAccountNumber": { "type": "string" },
        "isIban": { "type": "boolean" },
        "bic": { "type": "string" },
        "isBic": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationBankAccountRequest": {
      "type": "object",
      "properties": {
        "organisationBankAccountId": {
          "format": "uuid",
          "type": "string"
        },
        "bankAccountNumber": { "type": "string" },
        "isIban": { "type": "boolean" },
        "bic": { "type": "string" },
        "isBic": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationBuildingRequest": {
      "type": "object",
      "properties": {
        "organisationBuildingId": {
          "format": "uuid",
          "type": "string"
        },
        "buildingId": {
          "format": "uuid",
          "type": "string"
        },
        "isMainBuilding": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationBuildingListItem": {
      "type": "object",
      "properties": {
        "organisationBuildingId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "buildingId": {
          "format": "uuid",
          "type": "string"
        },
        "buildingName": { "type": "string" },
        "isMainBuilding": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationBuildingRequest": {
      "type": "object",
      "properties": {
        "organisationBuildingId": {
          "format": "uuid",
          "type": "string"
        },
        "buildingId": {
          "format": "uuid",
          "type": "string"
        },
        "isMainBuilding": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationCapacityRequest": {
      "type": "object",
      "properties": {
        "organisationCapacityId": {
          "format": "uuid",
          "type": "string"
        },
        "capacityId": {
          "format": "uuid",
          "type": "string"
        },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "functionId": {
          "format": "uuid",
          "type": "string"
        },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationCapacityResponse": {
      "type": "object",
      "properties": {
        "organisationCapacityId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "capacityId": {
          "format": "uuid",
          "type": "string"
        },
        "capacityName": { "type": "string" },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "personName": { "type": "string" },
        "functionId": {
          "format": "uuid",
          "type": "string"
        },
        "functionName": { "type": "string" },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationCapacityRequest": {
      "type": "object",
      "properties": {
        "organisationCapacityId": {
          "format": "uuid",
          "type": "string"
        },
        "capacityId": {
          "format": "uuid",
          "type": "string"
        },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "functionId": {
          "format": "uuid",
          "type": "string"
        },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CreateOrganisationClassificationRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "active": { "type": "boolean" },
        "organisationClassificationTypeId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "OrganisationClassificationListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "active": { "type": "boolean" },
        "organisationClassificationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationTypeName": { "type": "string" }
      }
    },
    "UpdateOrganisationClassificationRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "active": { "type": "boolean" },
        "organisationClassificationTypeId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "ClassificationOrganisation": {
      "type": "object",
      "properties": {
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" },
        "organisationShortName": { "type": "string" },
        "organisationNameFrench": { "type": "string" },
        "organisationNameEnglish": { "type": "string" },
        "organisationNameGerman": { "type": "string" }
      }
    },
    "PagedQueryable[OrganisationClassificationListQueryResult]": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationClassificationListQueryResult" },
          "readOnly": true
        },
        "paginationInfo": {
          "$ref": "#/definitions/PaginationInfo",
          "readOnly": true
        }
      }
    },
    "OrganisationClassificationListQueryResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "active": {
          "type": "boolean",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "order": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "organisationClassificationTypeName": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PaginationInfo": {
      "type": "object",
      "properties": {
        "currentPage": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "itemsPerPage": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "totalItems": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "totalPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "ClassificationOrganisationParticipation": {
      "type": "object",
      "properties": {
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationName": { "type": "string" },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyName": { "type": "string" },
        "malePercentage": {
          "format": "double",
          "type": "number"
        },
        "femalePercentage": {
          "format": "double",
          "type": "number"
        },
        "unknownPercentage": {
          "format": "double",
          "type": "number"
        },
        "maleCount": {
          "format": "int32",
          "type": "integer"
        },
        "femaleCount": {
          "format": "int32",
          "type": "integer"
        },
        "unknownCount": {
          "format": "int32",
          "type": "integer"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "assignedCount": {
          "format": "int32",
          "type": "integer"
        },
        "unassignedCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CreateOrganisationClassificationTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "OrganisationClassificationTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdateOrganisationClassificationTypeRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "AddOrganisationContactRequest": {
      "type": "object",
      "properties": {
        "organisationContactId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "contactValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationContactListItem": {
      "type": "object",
      "properties": {
        "organisationContactId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeName": { "type": "string" },
        "contactValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationContactRequest": {
      "type": "object",
      "properties": {
        "organisationContactId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "contactValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationFormalFrameworkRequest": {
      "type": "object",
      "properties": {
        "organisationFormalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationFormalFrameworkListItem": {
      "type": "object",
      "properties": {
        "organisationFormalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkName": { "type": "string" },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationFormalFrameworkRequest": {
      "type": "object",
      "properties": {
        "organisationFormalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationFunctionRequest": {
      "type": "object",
      "properties": {
        "organisationFunctionId": {
          "format": "uuid",
          "type": "string"
        },
        "functionId": {
          "format": "uuid",
          "type": "string"
        },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationFunctionResponse": {
      "type": "object",
      "properties": {
        "organisationFunctionId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "functionId": {
          "format": "uuid",
          "type": "string"
        },
        "functionName": { "type": "string" },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "personName": { "type": "string" },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationFunctionRequest": {
      "type": "object",
      "properties": {
        "organisationFunctionId": {
          "format": "uuid",
          "type": "string"
        },
        "functionId": {
          "format": "uuid",
          "type": "string"
        },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "contacts": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationKeyRequest": {
      "type": "object",
      "properties": {
        "organisationKeyId": {
          "format": "uuid",
          "type": "string"
        },
        "keyTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "keyValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationKeyListItem": {
      "type": "object",
      "properties": {
        "organisationKeyId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "keyTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "keyTypeName": { "type": "string" },
        "keyValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationKeyRequest": {
      "type": "object",
      "properties": {
        "organisationKeyId": {
          "format": "uuid",
          "type": "string"
        },
        "keyTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "keyValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationLabelRequest": {
      "type": "object",
      "properties": {
        "organisationLabelId": {
          "format": "uuid",
          "type": "string"
        },
        "labelTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "labelValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationLabelListItem": {
      "type": "object",
      "properties": {
        "organisationLabelId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "labelTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "labelTypeName": { "type": "string" },
        "labelValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationLabelRequest": {
      "type": "object",
      "properties": {
        "organisationLabelId": {
          "format": "uuid",
          "type": "string"
        },
        "labelTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "labelValue": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationLocationRequest": {
      "type": "object",
      "properties": {
        "organisationLocationId": {
          "format": "uuid",
          "type": "string"
        },
        "locationId": {
          "format": "uuid",
          "type": "string"
        },
        "isMainLocation": { "type": "boolean" },
        "locationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationLocationListItem": {
      "type": "object",
      "properties": {
        "organisationLocationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "locationId": {
          "format": "uuid",
          "type": "string"
        },
        "locationName": { "type": "string" },
        "locationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "locationTypeName": { "type": "string" },
        "isMainLocation": { "type": "boolean" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationLocationRequest": {
      "type": "object",
      "properties": {
        "organisationLocationId": {
          "format": "uuid",
          "type": "string"
        },
        "locationId": {
          "format": "uuid",
          "type": "string"
        },
        "isMainLocation": { "type": "boolean" },
        "locationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationOrganisationClassificationRequest": {
      "type": "object",
      "properties": {
        "organisationOrganisationClassificationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationOrganisationClassificationListItem": {
      "type": "object",
      "properties": {
        "organisationOrganisationClassificationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationTypeName": { "type": "string" },
        "organisationClassificationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationName": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationOrganisationClassificationRequest": {
      "type": "object",
      "properties": {
        "organisationOrganisationClassificationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationParentRequest": {
      "type": "object",
      "properties": {
        "organisationOrganisationParentId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationParentListItem": {
      "type": "object",
      "properties": {
        "organisationOrganisationParentId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationParentRequest": {
      "type": "object",
      "properties": {
        "organisationOrganisationParentId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddOrganisationRelationRequest": {
      "type": "object",
      "properties": {
        "organisationRelationId": {
          "format": "uuid",
          "type": "string"
        },
        "relationId": {
          "format": "uuid",
          "type": "string"
        },
        "relatedOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "OrganisationRelationResponse": {
      "type": "object",
      "properties": {
        "organisationRelationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationId": {
          "format": "uuid",
          "type": "string"
        },
        "relationId": {
          "format": "uuid",
          "type": "string"
        },
        "relationName": { "type": "string" },
        "relatedOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "relatedOrganisationName": { "type": "string" },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateOrganisationRelationRequest": {
      "type": "object",
      "properties": {
        "organisationRelationId": {
          "format": "uuid",
          "type": "string"
        },
        "relationId": {
          "format": "uuid",
          "type": "string"
        },
        "relatedOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CreateOrganisationRelationTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "inverseName": { "type": "string" }
      }
    },
    "OrganisationRelationTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "inverseName": { "type": "string" }
      }
    },
    "UpdateOrganisationRelationTypeRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "inverseName": { "type": "string" }
      }
    },
    "CreatePersonRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "firstName": { "type": "string" },
        "name": { "type": "string" },
        "sex": {
          "enum": [ "male", "female" ],
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "PersonListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "firstName": { "type": "string" },
        "name": { "type": "string" },
        "fullName": { "type": "string" },
        "sex": {
          "enum": [ "male", "female" ],
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdatePersonRequest": {
      "type": "object",
      "properties": {
        "firstName": { "type": "string" },
        "name": { "type": "string" },
        "sex": {
          "enum": [ "male", "female" ],
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ProjectionStateItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "eventNumber": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UpdateProjectionStateRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "eventNumber": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CreatePurposeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "PurposeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" }
      }
    },
    "UpdatePurposeRequest": {
      "type": "object",
      "properties": { "name": { "type": "string" } }
    },
    "OrganisationDocument": {
      "type": "object",
      "properties": {
        "changeId": {
          "format": "int32",
          "type": "integer"
        },
        "changeTime": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "ovoNumber": { "type": "string" },
        "shortName": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" },
        "description": { "type": "string" },
        "showOnVlaamseOverheidSites": { "type": "boolean" },
        "purposes": {
          "type": "array",
          "items": { "$ref": "#/definitions/Purpose" }
        },
        "labels": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationLabel" }
        },
        "keys": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationKey" }
        },
        "contacts": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationContact" }
        },
        "organisationClassifications": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationOrganisationClassification" }
        },
        "functions": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationFunction" }
        },
        "relations": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationRelation" }
        },
        "capacities": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationCapacity" }
        },
        "parents": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationParent" }
        },
        "formalFrameworks": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationFormalFramework" }
        },
        "buildings": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationBuilding" }
        },
        "locations": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationLocation" }
        },
        "bodies": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationBody" }
        },
        "bankAccounts": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrganisationBankAccount" }
        }
      }
    },
    "Period": {
      "type": "object",
      "properties": {
        "start": {
          "format": "date-time",
          "type": "string"
        },
        "end": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Purpose": {
      "type": "object",
      "properties": {
        "purposeId": {
          "format": "uuid",
          "type": "string"
        },
        "purposeName": { "type": "string" }
      }
    },
    "OrganisationLabel": {
      "type": "object",
      "properties": {
        "organisationLabelId": {
          "format": "uuid",
          "type": "string"
        },
        "labelTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "labelTypeName": { "type": "string" },
        "value": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationKey": {
      "type": "object",
      "properties": {
        "organisationKeyId": {
          "format": "uuid",
          "type": "string"
        },
        "keyTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "keyTypeName": { "type": "string" },
        "value": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationContact": {
      "type": "object",
      "properties": {
        "organisationContactId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeName": { "type": "string" },
        "value": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationOrganisationClassification": {
      "type": "object",
      "properties": {
        "organisationOrganisationClassificationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationTypeName": { "type": "string" },
        "organisationClassificationId": {
          "format": "uuid",
          "type": "string"
        },
        "organisationClassificationName": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationFunction": {
      "type": "object",
      "properties": {
        "organisationFunctionId": {
          "format": "uuid",
          "type": "string"
        },
        "functionId": {
          "format": "uuid",
          "type": "string"
        },
        "functionName": {
          "type": "string",
          "readOnly": true
        },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "personName": {
          "type": "string",
          "readOnly": true
        },
        "contacts": {
          "type": "array",
          "items": { "$ref": "#/definitions/Contact" }
        },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationRelation": {
      "type": "object",
      "properties": {
        "organisationRelationId": {
          "format": "uuid",
          "type": "string"
        },
        "relationId": {
          "format": "uuid",
          "type": "string"
        },
        "relationName": {
          "type": "string",
          "readOnly": true
        },
        "relatedOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "relatedOrganisationName": {
          "type": "string",
          "readOnly": true
        },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationCapacity": {
      "type": "object",
      "properties": {
        "organisationCapacityId": {
          "format": "uuid",
          "type": "string"
        },
        "capacityId": {
          "format": "uuid",
          "type": "string"
        },
        "capacityName": { "type": "string" },
        "personId": {
          "format": "uuid",
          "type": "string"
        },
        "personName": { "type": "string" },
        "functionId": {
          "format": "uuid",
          "type": "string"
        },
        "functionName": { "type": "string" },
        "contacts": {
          "type": "array",
          "items": { "$ref": "#/definitions/Contact" }
        },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationParent": {
      "type": "object",
      "properties": {
        "organisationOrganisationParentId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationFormalFramework": {
      "type": "object",
      "properties": {
        "organisationFormalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkId": {
          "format": "uuid",
          "type": "string"
        },
        "formalFrameworkName": { "type": "string" },
        "parentOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "parentOrganisationName": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationBuilding": {
      "type": "object",
      "properties": {
        "organisationBuildingId": {
          "format": "uuid",
          "type": "string"
        },
        "buildingId": {
          "format": "uuid",
          "type": "string"
        },
        "buildingName": { "type": "string" },
        "isMainBuilding": { "type": "boolean" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationLocation": {
      "type": "object",
      "properties": {
        "organisationLocationId": {
          "format": "uuid",
          "type": "string"
        },
        "locationId": {
          "format": "uuid",
          "type": "string"
        },
        "formattedAddress": { "type": "string" },
        "isMainLocation": { "type": "boolean" },
        "locationTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "locationTypeName": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationBody": {
      "type": "object",
      "properties": {
        "bodyOrganisationId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyId": {
          "format": "uuid",
          "type": "string"
        },
        "bodyName": { "type": "string" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "OrganisationBankAccount": {
      "type": "object",
      "properties": {
        "organisationBankAccountId": {
          "format": "uuid",
          "type": "string"
        },
        "bankAccountNumber": { "type": "string" },
        "isIban": { "type": "boolean" },
        "bic": { "type": "string" },
        "isBic": { "type": "boolean" },
        "validity": { "$ref": "#/definitions/Period" }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "contactTypeId": {
          "format": "uuid",
          "type": "string"
        },
        "contactTypeName": { "type": "string" },
        "value": { "type": "string" }
      }
    },
    "CreateSeatTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "order": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SeatTypeListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": { "type": "string" },
        "order": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UpdateSeatTypeRequest": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "order": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TogglesConfiguration": {
      "type": "object",
      "properties": {
        "created": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "applicationAvailable": { "type": "boolean" },
        "logToElasticSearch": { "type": "boolean" },
        "apiAvailable": { "type": "boolean" },
        "elasticSearchProjectionsAvailable": { "type": "boolean" },
        "vlaanderenBeNotifierAvailable": { "type": "boolean" },
        "delegationsRunnerAvailable": { "type": "boolean" },
        "elasticSearchJanitorAvailable": { "type": "boolean" },
        "agentschapZorgEnGezondheidFtpDumpAvailable": { "type": "boolean" },
        "sendVlaanderenBeNotifierMails": { "type": "boolean" },
        "reportingRunnerAvailable": { "type": "boolean" },
        "enableReporting": { "type": "boolean" },
        "enableVademecumParticipationReporting": { "type": "boolean" },
        "enableFormalFrameworkBodiesReporting": { "type": "boolean" },
        "enableMonitoring": { "type": "boolean" },
        "enableOrganisationRelations": { "type": "boolean" }
      }
    },
    "TaskRequest": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [ "checkIfDayHasPassed", "rebuildProjection", "compensatingAction" ],
          "type": "string"
        },
        "params": {
          "type": "array",
          "items": { "type": "string" }
        }
      }
    }
  },
  "securityDefinitions": {}
}
